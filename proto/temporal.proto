syntax="proto3";

package temporal;

import "google/protobuf/empty.proto";
import "temporal/v1/temporal.proto";

option go_package = "temporal-master-class/generated/temporal";

service Customer {
  // Очередь задач
  // https://docs.temporal.io/workers#task-queue
  option (temporal.v1.service) = {
    task_queue: "root-v1"
  };

  // Это основной workflow, представляющий жизненный цикл пользователя
  rpc Create(CreateRequest) returns (google.protobuf.Empty) {
    option (temporal.v1.workflow) = {
      id_reuse_policy: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE
      id: 'customers/${! customerId.or(id.or(uuid_v4())) }'
      // handlers
      query: { ref: "Read" }
      update: { ref: "Update" }
      signal: { ref: "Delete" }
    };
  }

  // Получение профиля из запущенного workflow
  // https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers
  rpc Read(google.protobuf.Empty) returns (Profile) {
    option (temporal.v1.query) = {};
  }

  // Обновление профиля в запущенном workflow
  // https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers
  rpc Update(UpdateRequest) returns (Profile) {
    option (temporal.v1.update) = {};
  }

  // Удаление профиля. На самом деле это сигнал, который будет останавливать workflow с признаком отменен.
  // https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-signal-handlers
  rpc Delete(google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (temporal.v1.signal) = {};
  }
}

message CreateRequest {
  string name = 1;
  string phone = 2;
};

message Profile {
  string id = 1;
  string name = 2;
  string phone = 3;
};

message UpdateRequest {
  string name = 1;
}
