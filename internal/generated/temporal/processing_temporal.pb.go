// Code generated by protoc-gen-go_temporal. DO NOT EDIT.
// versions:
//
//	protoc-gen-go_temporal dev (latest)
//	go go1.22.2
//	protoc major:4 minor:25 patch:1 suffix:""
//
// source: processing.proto
package temporal

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	expression "github.com/cludden/protoc-gen-go-temporal/pkg/expression"
	helpers "github.com/cludden/protoc-gen-go-temporal/pkg/helpers"
	gohomedir "github.com/mitchellh/go-homedir"
	v2 "github.com/urfave/cli/v2"
	enumsv1 "go.temporal.io/api/enums/v1"
	activity "go.temporal.io/sdk/activity"
	client "go.temporal.io/sdk/client"
	temporal "go.temporal.io/sdk/temporal"
	testsuite "go.temporal.io/sdk/testsuite"
	worker "go.temporal.io/sdk/worker"
	workflow "go.temporal.io/sdk/workflow"
	protojson "google.golang.org/protobuf/encoding/protojson"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	"log/slog"
	"os"
	"sort"
	"time"
)

// ProcessingTaskQueue is the default task-queue for a temporal.Processing worker
const ProcessingTaskQueue = "general"

// temporal.Processing workflow names
const (
	ProcessingFlowWorkflowName = "temporal.Processing.ProcessingFlow"
)

// temporal.Processing workflow id expressions
var (
	ProcessingFlowIdexpression = expression.MustParseExpression("orders/${! id }")
)

// temporal.Processing activity names
const (
	CreateVendorOrderActivityName = "temporal.Processing.CreateVendorOrder"
	GetPaymentActivityName        = "temporal.Processing.GetPayment"
	GetVendorOrderActivityName    = "temporal.Processing.GetVendorOrder"
)

// temporal.Processing query names
const (
	GetOrderQueryName = "temporal.Processing.GetOrder"
)

// ProcessingClient describes a client for a(n) temporal.Processing worker
type ProcessingClient interface {
	// ProcessingFlow executes a(n) temporal.Processing.ProcessingFlow workflow and blocks until error or response received
	ProcessingFlow(ctx context.Context, req *ProcessingFlowRequest, opts ...*ProcessingFlowOptions) error

	// ProcessingFlowAsync starts a(n) temporal.Processing.ProcessingFlow workflow and returns a handle to the workflow run
	ProcessingFlowAsync(ctx context.Context, req *ProcessingFlowRequest, opts ...*ProcessingFlowOptions) (ProcessingFlowRun, error)

	// GetProcessingFlow retrieves a handle to an existing temporal.Processing.ProcessingFlow workflow execution
	GetProcessingFlow(ctx context.Context, workflowID string, runID string) ProcessingFlowRun

	// CancelWorkflow requests cancellation of an existing workflow execution
	CancelWorkflow(ctx context.Context, workflowID string, runID string) error

	// TerminateWorkflow an existing workflow execution
	TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error

	// temporal.Processing.GetOrder executes a(n) temporal.Processing.GetOrder query
	GetOrder(ctx context.Context, workflowID string, runID string) (*Order, error)
}

// processingClient implements a temporal client for a temporal.Processing service
type processingClient struct {
	client client.Client
	log    *slog.Logger
}

// NewProcessingClient initializes a new temporal.Processing client
func NewProcessingClient(c client.Client, options ...*processingClientOptions) ProcessingClient {
	var cfg *processingClientOptions
	if len(options) > 0 {
		cfg = options[0]
	} else {
		cfg = NewProcessingClientOptions()
	}
	return &processingClient{
		client: c,
		log:    cfg.getLogger(),
	}
}

// NewProcessingClientWithOptions initializes a new Processing client with the given options
func NewProcessingClientWithOptions(c client.Client, opts client.Options, options ...*processingClientOptions) (ProcessingClient, error) {
	var err error
	c, err = client.NewClientFromExisting(c, opts)
	if err != nil {
		return nil, fmt.Errorf("error initializing client with options: %w", err)
	}
	var cfg *processingClientOptions
	if len(options) > 0 {
		cfg = options[0]
	} else {
		cfg = NewProcessingClientOptions()
	}
	return &processingClient{
		client: c,
		log:    cfg.getLogger(),
	}, nil
}

// processingClientOptions describes optional runtime configuration for a ProcessingClient
type processingClientOptions struct {
	log *slog.Logger
}

// NewProcessingClientOptions initializes a new processingClientOptions value
func NewProcessingClientOptions() *processingClientOptions {
	return &processingClientOptions{}
}

// WithLogger can be used to override the default logger
func (opts *processingClientOptions) WithLogger(l *slog.Logger) *processingClientOptions {
	if l != nil {
		opts.log = l
	}
	return opts
}

// getLogger returns the configured logger, or the default logger
func (opts *processingClientOptions) getLogger() *slog.Logger {
	if opts != nil && opts.log != nil {
		return opts.log
	}
	return slog.Default()
}

// temporal.Processing.ProcessingFlow executes a temporal.Processing.ProcessingFlow workflow and blocks until error or response received
func (c *processingClient) ProcessingFlow(ctx context.Context, req *ProcessingFlowRequest, options ...*ProcessingFlowOptions) error {
	run, err := c.ProcessingFlowAsync(ctx, req, options...)
	if err != nil {
		return err
	}
	return run.Get(ctx)
}

// ProcessingFlowAsync starts a(n) temporal.Processing.ProcessingFlow workflow and returns a handle to the workflow run
func (c *processingClient) ProcessingFlowAsync(ctx context.Context, req *ProcessingFlowRequest, options ...*ProcessingFlowOptions) (ProcessingFlowRun, error) {
	var o *ProcessingFlowOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewProcessingFlowOptions()
	}
	opts, err := o.Build(req.ProtoReflect())
	if err != nil {
		return nil, fmt.Errorf("error initializing client.StartWorkflowOptions: %w", err)
	}
	run, err := c.client.ExecuteWorkflow(ctx, opts, ProcessingFlowWorkflowName, req)
	if err != nil {
		return nil, err
	}
	if run == nil {
		return nil, errors.New("execute workflow returned nil run")
	}
	return &processingFlowRun{
		client: c,
		run:    run,
	}, nil
}

// GetProcessingFlow fetches an existing temporal.Processing.ProcessingFlow execution
func (c *processingClient) GetProcessingFlow(ctx context.Context, workflowID string, runID string) ProcessingFlowRun {
	return &processingFlowRun{
		client: c,
		run:    c.client.GetWorkflow(ctx, workflowID, runID),
	}
}

// CancelWorkflow requests cancellation of an existing workflow execution
func (c *processingClient) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	return c.client.CancelWorkflow(ctx, workflowID, runID)
}

// TerminateWorkflow terminates an existing workflow execution
func (c *processingClient) TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error {
	return c.client.TerminateWorkflow(ctx, workflowID, runID, reason, details...)
}

// temporal.Processing.GetOrder sends a(n) temporal.Processing.GetOrder query to an existing workflow
func (c *processingClient) GetOrder(ctx context.Context, workflowID string, runID string) (*Order, error) {
	var resp Order
	if val, err := c.client.QueryWorkflow(ctx, workflowID, runID, GetOrderQueryName); err != nil {
		return nil, err
	} else if err = val.Get(&resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// ProcessingFlowOptions provides configuration for a temporal.Processing.ProcessingFlow workflow operation
type ProcessingFlowOptions struct {
	options          client.StartWorkflowOptions
	executionTimeout *time.Duration
	id               *string
	idReusePolicy    enumsv1.WorkflowIdReusePolicy
	retryPolicy      *temporal.RetryPolicy
	runTimeout       *time.Duration
	searchAttributes map[string]any
	taskQueue        *string
	taskTimeout      *time.Duration
}

// NewProcessingFlowOptions initializes a new ProcessingFlowOptions value
func NewProcessingFlowOptions() *ProcessingFlowOptions {
	return &ProcessingFlowOptions{}
}

// Build initializes a new go.temporal.io/sdk/client.StartWorkflowOptions value with defaults and overrides applied
func (o *ProcessingFlowOptions) Build(req protoreflect.Message) (client.StartWorkflowOptions, error) {
	opts := o.options
	if v := o.id; v != nil {
		opts.ID = *v
	} else if opts.ID == "" {
		id, err := expression.EvalExpression(ProcessingFlowIdexpression, req)
		if err != nil {
			return opts, fmt.Errorf("error evaluating id expression for %q workflow: %w", ProcessingFlowWorkflowName, err)
		}
		opts.ID = id
	}
	if v := o.idReusePolicy; v != enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = v
	} else if opts.WorkflowIDReusePolicy == enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = enumsv1.WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = ProcessingTaskQueue
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.searchAttributes; v != nil {
		opts.SearchAttributes = o.searchAttributes
	}
	if v := o.executionTimeout; v != nil {
		opts.WorkflowExecutionTimeout = *v
	}
	if v := o.runTimeout; v != nil {
		opts.WorkflowRunTimeout = *v
	}
	if v := o.taskTimeout; v != nil {
		opts.WorkflowTaskTimeout = *v
	}
	return opts, nil
}

// WithStartWorkflowOptions sets the initial go.temporal.io/sdk/client.StartWorkflowOptions
func (o *ProcessingFlowOptions) WithStartWorkflowOptions(options client.StartWorkflowOptions) *ProcessingFlowOptions {
	o.options = options
	return o
}

// WithExecutionTimeout sets the WorkflowExecutionTimeout value
func (o *ProcessingFlowOptions) WithExecutionTimeout(d time.Duration) *ProcessingFlowOptions {
	o.executionTimeout = &d
	return o
}

// WithID sets the ID value
func (o *ProcessingFlowOptions) WithID(id string) *ProcessingFlowOptions {
	o.id = &id
	return o
}

// WithIDReusePolicy sets the WorkflowIDReusePolicy value
func (o *ProcessingFlowOptions) WithIDReusePolicy(policy enumsv1.WorkflowIdReusePolicy) *ProcessingFlowOptions {
	o.idReusePolicy = policy
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *ProcessingFlowOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *ProcessingFlowOptions {
	o.retryPolicy = policy
	return o
}

// WithRunTimeout sets the WorkflowRunTimeout value
func (o *ProcessingFlowOptions) WithRunTimeout(d time.Duration) *ProcessingFlowOptions {
	o.runTimeout = &d
	return o
}

// WithSearchAttributes sets the SearchAttributes value
func (o *ProcessingFlowOptions) WithSearchAttributes(sa map[string]any) *ProcessingFlowOptions {
	o.searchAttributes = sa
	return o
}

// WithTaskTimeout sets the WorkflowTaskTimeout value
func (o *ProcessingFlowOptions) WithTaskTimeout(d time.Duration) *ProcessingFlowOptions {
	o.taskTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *ProcessingFlowOptions) WithTaskQueue(tq string) *ProcessingFlowOptions {
	o.taskQueue = &tq
	return o
}

// ProcessingFlowRun describes a(n) temporal.Processing.ProcessingFlow workflow run
type ProcessingFlowRun interface {
	// ID returns the workflow ID
	ID() string

	// RunID returns the workflow instance ID
	RunID() string

	// Run returns the inner client.WorkflowRun
	Run() client.WorkflowRun

	// Get blocks until the workflow is complete and returns the result
	Get(ctx context.Context) error

	// Cancel requests cancellation of a workflow in execution, returning an error if applicable
	Cancel(ctx context.Context) error

	// Terminate terminates a workflow in execution, returning an error if applicable
	Terminate(ctx context.Context, reason string, details ...interface{}) error

	// temporal.Processing.GetOrder executes a(n) temporal.Processing.GetOrder query
	GetOrder(ctx context.Context) (*Order, error)
}

// processingFlowRun provides an internal implementation of a(n) ProcessingFlowRunRun
type processingFlowRun struct {
	client *processingClient
	run    client.WorkflowRun
}

// ID returns the workflow ID
func (r *processingFlowRun) ID() string {
	return r.run.GetID()
}

// Run returns the inner client.WorkflowRun
func (r *processingFlowRun) Run() client.WorkflowRun {
	return r.run
}

// RunID returns the execution ID
func (r *processingFlowRun) RunID() string {
	return r.run.GetRunID()
}

// Cancel requests cancellation of a workflow in execution, returning an error if applicable
func (r *processingFlowRun) Cancel(ctx context.Context) error {
	return r.client.CancelWorkflow(ctx, r.ID(), r.RunID())
}

// Get blocks until the workflow is complete, returning the result if applicable
func (r *processingFlowRun) Get(ctx context.Context) error {
	return r.run.Get(ctx, nil)
}

// Terminate terminates a workflow in execution, returning an error if applicable
func (r *processingFlowRun) Terminate(ctx context.Context, reason string, details ...interface{}) error {
	return r.client.TerminateWorkflow(ctx, r.ID(), r.RunID(), reason, details...)
}

// temporal.Processing.GetOrder executes a(n) temporal.Processing.GetOrder query
func (r *processingFlowRun) GetOrder(ctx context.Context) (*Order, error) {
	return r.client.GetOrder(ctx, r.ID(), "")
}

// Reference to generated workflow functions
var (
	// ProcessingFlowFunction implements a "temporal.Processing.ProcessingFlow" workflow
	ProcessingFlowFunction func(workflow.Context, *ProcessingFlowRequest) error
)

// ProcessingWorkflowFunctions describes a mockable dependency for inlining workflows within other workflows
type (
	// ProcessingWorkflowFunctions describes a mockable dependency for inlining workflows within other workflows
	ProcessingWorkflowFunctions interface {
		// ProcessingFlow executes a "temporal.Processing.ProcessingFlow" workflow inline
		ProcessingFlow(workflow.Context, *ProcessingFlowRequest) error
	}
	// processingWorkflowFunctions provides an internal ProcessingWorkflowFunctions implementation
	processingWorkflowFunctions struct{}
)

func NewProcessingWorkflowFunctions() ProcessingWorkflowFunctions {
	return &processingWorkflowFunctions{}
}

// ProcessingFlow executes a "temporal.Processing.ProcessingFlow" workflow inline
func (f *processingWorkflowFunctions) ProcessingFlow(ctx workflow.Context, req *ProcessingFlowRequest) error {
	if ProcessingFlowFunction == nil {
		return errors.New("ProcessingFlow requires workflow registration via RegisterProcessingWorkflows or RegisterProcessingFlowWorkflow")
	}
	return ProcessingFlowFunction(ctx, req)
}

// ProcessingWorkflows provides methods for initializing new temporal.Processing workflow values
type ProcessingWorkflows interface {
	// ProcessingFlow initializes a new a(n) ProcessingFlowWorkflow implementation
	ProcessingFlow(ctx workflow.Context, input *ProcessingFlowWorkflowInput) (ProcessingFlowWorkflow, error)
}

// RegisterProcessingWorkflows registers temporal.Processing workflows with the given worker
func RegisterProcessingWorkflows(r worker.WorkflowRegistry, workflows ProcessingWorkflows) {
	RegisterProcessingFlowWorkflow(r, workflows.ProcessingFlow)
}

// RegisterProcessingFlowWorkflow registers a temporal.Processing.ProcessingFlow workflow with the given worker
func RegisterProcessingFlowWorkflow(r worker.WorkflowRegistry, wf func(workflow.Context, *ProcessingFlowWorkflowInput) (ProcessingFlowWorkflow, error)) {
	ProcessingFlowFunction = buildProcessingFlow(wf)
	r.RegisterWorkflowWithOptions(ProcessingFlowFunction, workflow.RegisterOptions{Name: ProcessingFlowWorkflowName})
}

// buildProcessingFlow converts a ProcessingFlow workflow struct into a valid workflow function
func buildProcessingFlow(ctor func(workflow.Context, *ProcessingFlowWorkflowInput) (ProcessingFlowWorkflow, error)) func(workflow.Context, *ProcessingFlowRequest) error {
	return func(ctx workflow.Context, req *ProcessingFlowRequest) error {
		input := &ProcessingFlowWorkflowInput{
			Req: req,
		}
		wf, err := ctor(ctx, input)
		if err != nil {
			return err
		}
		if initializable, ok := wf.(helpers.Initializable); ok {
			if err := initializable.Initialize(ctx); err != nil {
				return err
			}
		}
		if err := workflow.SetQueryHandler(ctx, GetOrderQueryName, wf.GetOrder); err != nil {
			return err
		}
		return wf.Execute(ctx)
	}
}

// ProcessingFlowWorkflowInput describes the input to a(n) temporal.Processing.ProcessingFlow workflow constructor
type ProcessingFlowWorkflowInput struct {
	Req *ProcessingFlowRequest
}

// ProcessingFlowWorkflow describes a(n) temporal.Processing.ProcessingFlow workflow implementation
//
// workflow details: (id: "orders/${! id }")
type ProcessingFlowWorkflow interface {
	// Execute defines the entrypoint to a(n) temporal.Processing.ProcessingFlow workflow
	Execute(ctx workflow.Context) error

	// temporal.Processing.GetOrder implements a(n) temporal.Processing.GetOrder query handler
	GetOrder() (*Order, error)
}

// ProcessingFlowChild executes a child temporal.Processing.ProcessingFlow workflow and blocks until error or response received
func ProcessingFlowChild(ctx workflow.Context, req *ProcessingFlowRequest, options ...*ProcessingFlowChildOptions) error {
	childRun, err := ProcessingFlowChildAsync(ctx, req, options...)
	if err != nil {
		return err
	}
	return childRun.Get(ctx)
}

// ProcessingFlowChildAsync starts a child temporal.Processing.ProcessingFlow workflow and returns a handle to the child workflow run
func ProcessingFlowChildAsync(ctx workflow.Context, req *ProcessingFlowRequest, options ...*ProcessingFlowChildOptions) (*ProcessingFlowChildRun, error) {
	var o *ProcessingFlowChildOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewProcessingFlowChildOptions()
	}
	opts, err := o.Build(ctx, req.ProtoReflect())
	if err != nil {
		return nil, fmt.Errorf("error initializing workflow.ChildWorkflowOptions: %w", err)
	}
	ctx = workflow.WithChildOptions(ctx, opts)
	return &ProcessingFlowChildRun{Future: workflow.ExecuteChildWorkflow(ctx, ProcessingFlowWorkflowName, req)}, nil
}

// ProcessingFlowChildOptions provides configuration for a child temporal.Processing.ProcessingFlow workflow operation
type ProcessingFlowChildOptions struct {
	options             workflow.ChildWorkflowOptions
	executionTimeout    *time.Duration
	id                  *string
	idReusePolicy       enumsv1.WorkflowIdReusePolicy
	retryPolicy         *temporal.RetryPolicy
	runTimeout          *time.Duration
	searchAttributes    map[string]any
	taskQueue           *string
	taskTimeout         *time.Duration
	parentClosePolicy   enumsv1.ParentClosePolicy
	waitForCancellation *bool
}

// NewProcessingFlowChildOptions initializes a new ProcessingFlowChildOptions value
func NewProcessingFlowChildOptions() *ProcessingFlowChildOptions {
	return &ProcessingFlowChildOptions{}
}

// Build initializes a new go.temporal.io/sdk/workflow.ChildWorkflowOptions value with defaults and overrides applied
func (o *ProcessingFlowChildOptions) Build(ctx workflow.Context, req protoreflect.Message) (workflow.ChildWorkflowOptions, error) {
	opts := o.options
	if v := o.id; v != nil {
		opts.WorkflowID = *v
	} else if opts.WorkflowID == "" {
		// wrap expression evaluation in local activity
		// more info: https://cludden.github.io/protoc-gen-go-temporal/docs/guides/patches#pv_64-expression-evaluation-local-activity
		if workflow.GetVersion(ctx, "cludden_protoc-gen-go-temporal_64_expression-evaluation-local-activity", workflow.DefaultVersion, 1) == 1 {
			lao := workflow.GetLocalActivityOptions(ctx)
			lao.ScheduleToCloseTimeout = time.Second * 10
			if err := workflow.ExecuteLocalActivity(workflow.WithLocalActivityOptions(ctx, lao), func(ctx context.Context) (string, error) {
				id, err := expression.EvalExpression(ProcessingFlowIdexpression, req)
				if err != nil {
					return "", fmt.Errorf("error evaluating id expression for %q workflow: %w", ProcessingFlowWorkflowName, err)
				}
				return id, nil
			}).Get(ctx, &opts.WorkflowID); err != nil {
				return opts, fmt.Errorf("error evaluating id expression for %q workflow: %w", ProcessingFlowWorkflowName, err)
			}
		} else {
			id, err := expression.EvalExpression(ProcessingFlowIdexpression, req)
			if err != nil {
				return opts, fmt.Errorf("error evaluating id expression for %q workflow: %w", ProcessingFlowWorkflowName, err)
			}
			opts.WorkflowID = id
		}
	}
	if v := o.idReusePolicy; v != enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = v
	} else if opts.WorkflowIDReusePolicy == enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = enumsv1.WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = ProcessingTaskQueue
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.searchAttributes; v != nil {
		opts.SearchAttributes = o.searchAttributes
	}
	if v := o.executionTimeout; v != nil {
		opts.WorkflowExecutionTimeout = *v
	}
	if v := o.runTimeout; v != nil {
		opts.WorkflowRunTimeout = *v
	}
	if v := o.taskTimeout; v != nil {
		opts.WorkflowTaskTimeout = *v
	}
	if v := o.parentClosePolicy; v != enumsv1.PARENT_CLOSE_POLICY_UNSPECIFIED {
		opts.ParentClosePolicy = v
	} else if opts.ParentClosePolicy == enumsv1.PARENT_CLOSE_POLICY_UNSPECIFIED {
		opts.ParentClosePolicy = enumsv1.PARENT_CLOSE_POLICY_ABANDON
	}
	if v := o.waitForCancellation; v != nil {
		opts.WaitForCancellation = *v
	}
	return opts, nil
}

// WithChildWorkflowOptions sets the initial go.temporal.io/sdk/workflow.ChildWorkflowOptions
func (o *ProcessingFlowChildOptions) WithChildWorkflowOptions(options workflow.ChildWorkflowOptions) *ProcessingFlowChildOptions {
	o.options = options
	return o
}

// WithExecutionTimeout sets the WorkflowExecutionTimeout value
func (o *ProcessingFlowChildOptions) WithExecutionTimeout(d time.Duration) *ProcessingFlowChildOptions {
	o.executionTimeout = &d
	return o
}

// WithID sets the WorkflowID value
func (o *ProcessingFlowChildOptions) WithID(id string) *ProcessingFlowChildOptions {
	o.id = &id
	return o
}

// WithIDReusePolicy sets the WorkflowIDReusePolicy value
func (o *ProcessingFlowChildOptions) WithIDReusePolicy(policy enumsv1.WorkflowIdReusePolicy) *ProcessingFlowChildOptions {
	o.idReusePolicy = policy
	return o
}

// WithParentClosePolicy sets the WorkflowIDReusePolicy value
func (o *ProcessingFlowChildOptions) WithParentClosePolicy(policy enumsv1.ParentClosePolicy) *ProcessingFlowChildOptions {
	o.parentClosePolicy = policy
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *ProcessingFlowChildOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *ProcessingFlowChildOptions {
	o.retryPolicy = policy
	return o
}

// WithRunTimeout sets the WorkflowRunTimeout value
func (o *ProcessingFlowChildOptions) WithRunTimeout(d time.Duration) *ProcessingFlowChildOptions {
	o.runTimeout = &d
	return o
}

// WithSearchAttributes sets the SearchAttributes value
func (o *ProcessingFlowChildOptions) WithSearchAttributes(sa map[string]any) *ProcessingFlowChildOptions {
	o.searchAttributes = sa
	return o
}

// WithTaskTimeout sets the WorkflowTaskTimeout value
func (o *ProcessingFlowChildOptions) WithTaskTimeout(d time.Duration) *ProcessingFlowChildOptions {
	o.taskTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *ProcessingFlowChildOptions) WithTaskQueue(tq string) *ProcessingFlowChildOptions {
	o.taskQueue = &tq
	return o
}

// WithWaitForCancellation sets the WaitForCancellation value
func (o *ProcessingFlowChildOptions) WithWaitForCancellation(wait bool) *ProcessingFlowChildOptions {
	o.waitForCancellation = &wait
	return o
}

// ProcessingFlowChildRun describes a child ProcessingFlow workflow run
type ProcessingFlowChildRun struct {
	Future workflow.ChildWorkflowFuture
}

// Get blocks until the workflow is completed, returning the response value
func (r *ProcessingFlowChildRun) Get(ctx workflow.Context) error {
	if err := r.Future.Get(ctx, nil); err != nil {
		return err
	}
	return nil
}

// Select adds this completion to the selector. Callback can be nil.
func (r *ProcessingFlowChildRun) Select(sel workflow.Selector, fn func(*ProcessingFlowChildRun)) workflow.Selector {
	return sel.AddFuture(r.Future, func(workflow.Future) {
		if fn != nil {
			fn(r)
		}
	})
}

// SelectStart adds waiting for start to the selector. Callback can be nil.
func (r *ProcessingFlowChildRun) SelectStart(sel workflow.Selector, fn func(*ProcessingFlowChildRun)) workflow.Selector {
	return sel.AddFuture(r.Future.GetChildWorkflowExecution(), func(workflow.Future) {
		if fn != nil {
			fn(r)
		}
	})
}

// WaitStart waits for the child workflow to start
func (r *ProcessingFlowChildRun) WaitStart(ctx workflow.Context) (*workflow.Execution, error) {
	var exec workflow.Execution
	if err := r.Future.GetChildWorkflowExecution().Get(ctx, &exec); err != nil {
		return nil, err
	}
	return &exec, nil
}

// ProcessingActivities describes available worker activities
type ProcessingActivities interface {
	// temporal.Processing.CreateVendorOrder implements a(n) temporal.Processing.CreateVendorOrder activity definition
	CreateVendorOrder(ctx context.Context, req *CreateVendorOrderRequest) (*CreateVendorOrderResponse, error)

	// temporal.Processing.GetPayment implements a(n) temporal.Processing.GetPayment activity definition
	GetPayment(ctx context.Context, req *PaymentStatusRequest) (*PaymentStatusResponse, error)

	// temporal.Processing.GetVendorOrder implements a(n) temporal.Processing.GetVendorOrder activity definition
	GetVendorOrder(ctx context.Context, req *VendorOrderRequest) (*VendorOrderResponse, error)
}

// RegisterProcessingActivities registers activities with a worker
func RegisterProcessingActivities(r worker.ActivityRegistry, activities ProcessingActivities) {
	RegisterCreateVendorOrderActivity(r, activities.CreateVendorOrder)
	RegisterGetPaymentActivity(r, activities.GetPayment)
	RegisterGetVendorOrderActivity(r, activities.GetVendorOrder)
}

// RegisterCreateVendorOrderActivity registers a temporal.Processing.CreateVendorOrder activity
func RegisterCreateVendorOrderActivity(r worker.ActivityRegistry, fn func(context.Context, *CreateVendorOrderRequest) (*CreateVendorOrderResponse, error)) {
	r.RegisterActivityWithOptions(fn, activity.RegisterOptions{
		Name: CreateVendorOrderActivityName,
	})
}

// CreateVendorOrderFuture describes a(n) temporal.Processing.CreateVendorOrder activity execution
type CreateVendorOrderFuture struct {
	Future workflow.Future
}

// Get blocks on the activity's completion, returning the response
func (f *CreateVendorOrderFuture) Get(ctx workflow.Context) (*CreateVendorOrderResponse, error) {
	var resp CreateVendorOrderResponse
	if err := f.Future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Select adds the activity's completion to the selector, callback can be nil
func (f *CreateVendorOrderFuture) Select(sel workflow.Selector, fn func(*CreateVendorOrderFuture)) workflow.Selector {
	return sel.AddFuture(f.Future, func(workflow.Future) {
		if fn != nil {
			fn(f)
		}
	})
}

// CreateVendorOrder executes a(n) temporal.Processing.CreateVendorOrder activity
func CreateVendorOrder(ctx workflow.Context, req *CreateVendorOrderRequest, options ...*CreateVendorOrderActivityOptions) (*CreateVendorOrderResponse, error) {
	return CreateVendorOrderAsync(ctx, req, options...).Get(ctx)
}

// CreateVendorOrderAsync executes a(n) temporal.Processing.CreateVendorOrder activity (asynchronously)
func CreateVendorOrderAsync(ctx workflow.Context, req *CreateVendorOrderRequest, options ...*CreateVendorOrderActivityOptions) *CreateVendorOrderFuture {
	var o *CreateVendorOrderActivityOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewCreateVendorOrderActivityOptions()
	}
	var err error
	if ctx, err = o.Build(ctx); err != nil {
		errF, errS := workflow.NewFuture(ctx)
		errS.SetError(err)
		return &CreateVendorOrderFuture{Future: errF}
	}
	activity := CreateVendorOrderActivityName
	future := &CreateVendorOrderFuture{Future: workflow.ExecuteActivity(ctx, activity, req)}
	return future
}

// CreateVendorOrderLocal executes a(n) temporal.Processing.CreateVendorOrder activity (locally)
func CreateVendorOrderLocal(ctx workflow.Context, req *CreateVendorOrderRequest, options ...*CreateVendorOrderLocalActivityOptions) (*CreateVendorOrderResponse, error) {
	return CreateVendorOrderLocalAsync(ctx, req, options...).Get(ctx)
}

// CreateVendorOrderLocalAsync executes a(n) temporal.Processing.CreateVendorOrder activity (asynchronously, locally)
func CreateVendorOrderLocalAsync(ctx workflow.Context, req *CreateVendorOrderRequest, options ...*CreateVendorOrderLocalActivityOptions) *CreateVendorOrderFuture {
	var o *CreateVendorOrderLocalActivityOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewCreateVendorOrderLocalActivityOptions()
	}
	var err error
	if ctx, err = o.Build(ctx); err != nil {
		errF, errS := workflow.NewFuture(ctx)
		errS.SetError(err)
		return &CreateVendorOrderFuture{Future: errF}
	}
	var activity any
	if o.fn != nil {
		activity = o.fn
	} else {
		activity = CreateVendorOrderActivityName
	}
	future := &CreateVendorOrderFuture{Future: workflow.ExecuteLocalActivity(ctx, activity, req)}
	return future
}

// CreateVendorOrderActivityOptions provides configuration for a(n) temporal.Processing.CreateVendorOrder activity
type CreateVendorOrderActivityOptions struct {
	options                workflow.ActivityOptions
	retryPolicy            *temporal.RetryPolicy
	scheduleToCloseTimeout *time.Duration
	startToCloseTimeout    *time.Duration
	heartbeatTimeout       *time.Duration
	scheduleToStartTimeout *time.Duration
	taskQueue              *string
	waitForCancellation    *bool
}

// NewCreateVendorOrderActivityOptions initializes a new CreateVendorOrderActivityOptions value
func NewCreateVendorOrderActivityOptions() *CreateVendorOrderActivityOptions {
	return &CreateVendorOrderActivityOptions{}
}

// Build initializes a workflow.Context with appropriate ActivityOptions values derived from schema defaults and any user-defined overrides
func (o *CreateVendorOrderActivityOptions) Build(ctx workflow.Context) (workflow.Context, error) {
	opts := o.options
	if v := o.heartbeatTimeout; v != nil {
		opts.HeartbeatTimeout = *v
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	} else if opts.RetryPolicy == nil {
		opts.RetryPolicy = &temporal.RetryPolicy{MaximumAttempts: int32(5)}
	}
	if v := o.scheduleToCloseTimeout; v != nil {
		opts.ScheduleToCloseTimeout = *v
	}
	if v := o.scheduleToStartTimeout; v != nil {
		opts.ScheduleToStartTimeout = *v
	}
	if v := o.startToCloseTimeout; v != nil {
		opts.StartToCloseTimeout = *v
	} else if opts.StartToCloseTimeout == 0 {
		opts.StartToCloseTimeout = 15000000000 // 15 seconds
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = ProcessingTaskQueue
	}
	if v := o.waitForCancellation; v != nil {
		opts.WaitForCancellation = *v
	}
	return workflow.WithActivityOptions(ctx, opts), nil
}

// WithActivityOptions specifies an initial ActivityOptions value to which defaults will be applied
func (o *CreateVendorOrderActivityOptions) WithActivityOptions(options workflow.ActivityOptions) *CreateVendorOrderActivityOptions {
	o.options = options
	return o
}

// WithHeartbeatTimeout sets the HeartbeatTimeout value
func (o *CreateVendorOrderActivityOptions) WithHeartbeatTimeout(d time.Duration) *CreateVendorOrderActivityOptions {
	o.heartbeatTimeout = &d
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *CreateVendorOrderActivityOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *CreateVendorOrderActivityOptions {
	o.retryPolicy = policy
	return o
}

// WithScheduleToCloseTimeout sets the ScheduleToCloseTimeout value
func (o *CreateVendorOrderActivityOptions) WithScheduleToCloseTimeout(d time.Duration) *CreateVendorOrderActivityOptions {
	o.scheduleToCloseTimeout = &d
	return o
}

// WithScheduleToStartTimeout sets the ScheduleToStartTimeout value
func (o *CreateVendorOrderActivityOptions) WithScheduleToStartTimeout(d time.Duration) *CreateVendorOrderActivityOptions {
	o.scheduleToStartTimeout = &d
	return o
}

// WithStartToCloseTimeout sets the StartToCloseTimeout value
func (o *CreateVendorOrderActivityOptions) WithStartToCloseTimeout(d time.Duration) *CreateVendorOrderActivityOptions {
	o.startToCloseTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *CreateVendorOrderActivityOptions) WithTaskQueue(tq string) *CreateVendorOrderActivityOptions {
	o.taskQueue = &tq
	return o
}

// WithWaitForCancellation sets the WaitForCancellation value
func (o *CreateVendorOrderActivityOptions) WithWaitForCancellation(wait bool) *CreateVendorOrderActivityOptions {
	o.waitForCancellation = &wait
	return o
}

// CreateVendorOrderLocalActivityOptions provides configuration for a(n) temporal.Processing.CreateVendorOrder activity
type CreateVendorOrderLocalActivityOptions struct {
	options                workflow.LocalActivityOptions
	retryPolicy            *temporal.RetryPolicy
	scheduleToCloseTimeout *time.Duration
	startToCloseTimeout    *time.Duration
	fn                     func(context.Context, *CreateVendorOrderRequest) (*CreateVendorOrderResponse, error)
}

// NewCreateVendorOrderLocalActivityOptions initializes a new CreateVendorOrderLocalActivityOptions value
func NewCreateVendorOrderLocalActivityOptions() *CreateVendorOrderLocalActivityOptions {
	return &CreateVendorOrderLocalActivityOptions{}
}

// Build initializes a workflow.Context with appropriate LocalActivityOptions values derived from schema defaults and any user-defined overrides
func (o *CreateVendorOrderLocalActivityOptions) Build(ctx workflow.Context) (workflow.Context, error) {
	opts := o.options
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	} else if opts.RetryPolicy == nil {
		opts.RetryPolicy = &temporal.RetryPolicy{MaximumAttempts: int32(5)}
	}
	if v := o.scheduleToCloseTimeout; v != nil {
		opts.ScheduleToCloseTimeout = *v
	}
	if v := o.startToCloseTimeout; v != nil {
		opts.StartToCloseTimeout = *v
	} else if opts.StartToCloseTimeout == 0 {
		opts.StartToCloseTimeout = 15000000000 // 15 seconds
	}
	return workflow.WithLocalActivityOptions(ctx, opts), nil
}

// Local specifies a custom temporal.Processing.CreateVendorOrder implementation
func (o *CreateVendorOrderLocalActivityOptions) Local(fn func(context.Context, *CreateVendorOrderRequest) (*CreateVendorOrderResponse, error)) *CreateVendorOrderLocalActivityOptions {
	o.fn = fn
	return o
}

// WithLocalActivityOptions specifies an initial LocalActivityOptions value to which defaults will be applied
func (o *CreateVendorOrderLocalActivityOptions) WithLocalActivityOptions(options workflow.LocalActivityOptions) *CreateVendorOrderLocalActivityOptions {
	o.options = options
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *CreateVendorOrderLocalActivityOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *CreateVendorOrderLocalActivityOptions {
	o.retryPolicy = policy
	return o
}

// WithScheduleToCloseTimeout sets the ScheduleToCloseTimeout value
func (o *CreateVendorOrderLocalActivityOptions) WithScheduleToCloseTimeout(d time.Duration) *CreateVendorOrderLocalActivityOptions {
	o.scheduleToCloseTimeout = &d
	return o
}

// WithStartToCloseTimeout sets the StartToCloseTimeout value
func (o *CreateVendorOrderLocalActivityOptions) WithStartToCloseTimeout(d time.Duration) *CreateVendorOrderLocalActivityOptions {
	o.startToCloseTimeout = &d
	return o
}

// RegisterGetPaymentActivity registers a temporal.Processing.GetPayment activity
func RegisterGetPaymentActivity(r worker.ActivityRegistry, fn func(context.Context, *PaymentStatusRequest) (*PaymentStatusResponse, error)) {
	r.RegisterActivityWithOptions(fn, activity.RegisterOptions{
		Name: GetPaymentActivityName,
	})
}

// GetPaymentFuture describes a(n) temporal.Processing.GetPayment activity execution
type GetPaymentFuture struct {
	Future workflow.Future
}

// Get blocks on the activity's completion, returning the response
func (f *GetPaymentFuture) Get(ctx workflow.Context) (*PaymentStatusResponse, error) {
	var resp PaymentStatusResponse
	if err := f.Future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Select adds the activity's completion to the selector, callback can be nil
func (f *GetPaymentFuture) Select(sel workflow.Selector, fn func(*GetPaymentFuture)) workflow.Selector {
	return sel.AddFuture(f.Future, func(workflow.Future) {
		if fn != nil {
			fn(f)
		}
	})
}

// GetPayment executes a(n) temporal.Processing.GetPayment activity
func GetPayment(ctx workflow.Context, req *PaymentStatusRequest, options ...*GetPaymentActivityOptions) (*PaymentStatusResponse, error) {
	return GetPaymentAsync(ctx, req, options...).Get(ctx)
}

// GetPaymentAsync executes a(n) temporal.Processing.GetPayment activity (asynchronously)
func GetPaymentAsync(ctx workflow.Context, req *PaymentStatusRequest, options ...*GetPaymentActivityOptions) *GetPaymentFuture {
	var o *GetPaymentActivityOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewGetPaymentActivityOptions()
	}
	var err error
	if ctx, err = o.Build(ctx); err != nil {
		errF, errS := workflow.NewFuture(ctx)
		errS.SetError(err)
		return &GetPaymentFuture{Future: errF}
	}
	activity := GetPaymentActivityName
	future := &GetPaymentFuture{Future: workflow.ExecuteActivity(ctx, activity, req)}
	return future
}

// GetPaymentLocal executes a(n) temporal.Processing.GetPayment activity (locally)
func GetPaymentLocal(ctx workflow.Context, req *PaymentStatusRequest, options ...*GetPaymentLocalActivityOptions) (*PaymentStatusResponse, error) {
	return GetPaymentLocalAsync(ctx, req, options...).Get(ctx)
}

// GetPaymentLocalAsync executes a(n) temporal.Processing.GetPayment activity (asynchronously, locally)
func GetPaymentLocalAsync(ctx workflow.Context, req *PaymentStatusRequest, options ...*GetPaymentLocalActivityOptions) *GetPaymentFuture {
	var o *GetPaymentLocalActivityOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewGetPaymentLocalActivityOptions()
	}
	var err error
	if ctx, err = o.Build(ctx); err != nil {
		errF, errS := workflow.NewFuture(ctx)
		errS.SetError(err)
		return &GetPaymentFuture{Future: errF}
	}
	var activity any
	if o.fn != nil {
		activity = o.fn
	} else {
		activity = GetPaymentActivityName
	}
	future := &GetPaymentFuture{Future: workflow.ExecuteLocalActivity(ctx, activity, req)}
	return future
}

// GetPaymentActivityOptions provides configuration for a(n) temporal.Processing.GetPayment activity
type GetPaymentActivityOptions struct {
	options                workflow.ActivityOptions
	retryPolicy            *temporal.RetryPolicy
	scheduleToCloseTimeout *time.Duration
	startToCloseTimeout    *time.Duration
	heartbeatTimeout       *time.Duration
	scheduleToStartTimeout *time.Duration
	taskQueue              *string
	waitForCancellation    *bool
}

// NewGetPaymentActivityOptions initializes a new GetPaymentActivityOptions value
func NewGetPaymentActivityOptions() *GetPaymentActivityOptions {
	return &GetPaymentActivityOptions{}
}

// Build initializes a workflow.Context with appropriate ActivityOptions values derived from schema defaults and any user-defined overrides
func (o *GetPaymentActivityOptions) Build(ctx workflow.Context) (workflow.Context, error) {
	opts := o.options
	if v := o.heartbeatTimeout; v != nil {
		opts.HeartbeatTimeout = *v
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	} else if opts.RetryPolicy == nil {
		opts.RetryPolicy = &temporal.RetryPolicy{MaximumAttempts: int32(1)}
	}
	if v := o.scheduleToCloseTimeout; v != nil {
		opts.ScheduleToCloseTimeout = *v
	}
	if v := o.scheduleToStartTimeout; v != nil {
		opts.ScheduleToStartTimeout = *v
	}
	if v := o.startToCloseTimeout; v != nil {
		opts.StartToCloseTimeout = *v
	} else if opts.StartToCloseTimeout == 0 {
		opts.StartToCloseTimeout = 1200000000000 // 20 minutes
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = ProcessingTaskQueue
	}
	if v := o.waitForCancellation; v != nil {
		opts.WaitForCancellation = *v
	}
	return workflow.WithActivityOptions(ctx, opts), nil
}

// WithActivityOptions specifies an initial ActivityOptions value to which defaults will be applied
func (o *GetPaymentActivityOptions) WithActivityOptions(options workflow.ActivityOptions) *GetPaymentActivityOptions {
	o.options = options
	return o
}

// WithHeartbeatTimeout sets the HeartbeatTimeout value
func (o *GetPaymentActivityOptions) WithHeartbeatTimeout(d time.Duration) *GetPaymentActivityOptions {
	o.heartbeatTimeout = &d
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *GetPaymentActivityOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *GetPaymentActivityOptions {
	o.retryPolicy = policy
	return o
}

// WithScheduleToCloseTimeout sets the ScheduleToCloseTimeout value
func (o *GetPaymentActivityOptions) WithScheduleToCloseTimeout(d time.Duration) *GetPaymentActivityOptions {
	o.scheduleToCloseTimeout = &d
	return o
}

// WithScheduleToStartTimeout sets the ScheduleToStartTimeout value
func (o *GetPaymentActivityOptions) WithScheduleToStartTimeout(d time.Duration) *GetPaymentActivityOptions {
	o.scheduleToStartTimeout = &d
	return o
}

// WithStartToCloseTimeout sets the StartToCloseTimeout value
func (o *GetPaymentActivityOptions) WithStartToCloseTimeout(d time.Duration) *GetPaymentActivityOptions {
	o.startToCloseTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *GetPaymentActivityOptions) WithTaskQueue(tq string) *GetPaymentActivityOptions {
	o.taskQueue = &tq
	return o
}

// WithWaitForCancellation sets the WaitForCancellation value
func (o *GetPaymentActivityOptions) WithWaitForCancellation(wait bool) *GetPaymentActivityOptions {
	o.waitForCancellation = &wait
	return o
}

// GetPaymentLocalActivityOptions provides configuration for a(n) temporal.Processing.GetPayment activity
type GetPaymentLocalActivityOptions struct {
	options                workflow.LocalActivityOptions
	retryPolicy            *temporal.RetryPolicy
	scheduleToCloseTimeout *time.Duration
	startToCloseTimeout    *time.Duration
	fn                     func(context.Context, *PaymentStatusRequest) (*PaymentStatusResponse, error)
}

// NewGetPaymentLocalActivityOptions initializes a new GetPaymentLocalActivityOptions value
func NewGetPaymentLocalActivityOptions() *GetPaymentLocalActivityOptions {
	return &GetPaymentLocalActivityOptions{}
}

// Build initializes a workflow.Context with appropriate LocalActivityOptions values derived from schema defaults and any user-defined overrides
func (o *GetPaymentLocalActivityOptions) Build(ctx workflow.Context) (workflow.Context, error) {
	opts := o.options
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	} else if opts.RetryPolicy == nil {
		opts.RetryPolicy = &temporal.RetryPolicy{MaximumAttempts: int32(1)}
	}
	if v := o.scheduleToCloseTimeout; v != nil {
		opts.ScheduleToCloseTimeout = *v
	}
	if v := o.startToCloseTimeout; v != nil {
		opts.StartToCloseTimeout = *v
	} else if opts.StartToCloseTimeout == 0 {
		opts.StartToCloseTimeout = 1200000000000 // 20 minutes
	}
	return workflow.WithLocalActivityOptions(ctx, opts), nil
}

// Local specifies a custom temporal.Processing.GetPayment implementation
func (o *GetPaymentLocalActivityOptions) Local(fn func(context.Context, *PaymentStatusRequest) (*PaymentStatusResponse, error)) *GetPaymentLocalActivityOptions {
	o.fn = fn
	return o
}

// WithLocalActivityOptions specifies an initial LocalActivityOptions value to which defaults will be applied
func (o *GetPaymentLocalActivityOptions) WithLocalActivityOptions(options workflow.LocalActivityOptions) *GetPaymentLocalActivityOptions {
	o.options = options
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *GetPaymentLocalActivityOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *GetPaymentLocalActivityOptions {
	o.retryPolicy = policy
	return o
}

// WithScheduleToCloseTimeout sets the ScheduleToCloseTimeout value
func (o *GetPaymentLocalActivityOptions) WithScheduleToCloseTimeout(d time.Duration) *GetPaymentLocalActivityOptions {
	o.scheduleToCloseTimeout = &d
	return o
}

// WithStartToCloseTimeout sets the StartToCloseTimeout value
func (o *GetPaymentLocalActivityOptions) WithStartToCloseTimeout(d time.Duration) *GetPaymentLocalActivityOptions {
	o.startToCloseTimeout = &d
	return o
}

// RegisterGetVendorOrderActivity registers a temporal.Processing.GetVendorOrder activity
func RegisterGetVendorOrderActivity(r worker.ActivityRegistry, fn func(context.Context, *VendorOrderRequest) (*VendorOrderResponse, error)) {
	r.RegisterActivityWithOptions(fn, activity.RegisterOptions{
		Name: GetVendorOrderActivityName,
	})
}

// GetVendorOrderFuture describes a(n) temporal.Processing.GetVendorOrder activity execution
type GetVendorOrderFuture struct {
	Future workflow.Future
}

// Get blocks on the activity's completion, returning the response
func (f *GetVendorOrderFuture) Get(ctx workflow.Context) (*VendorOrderResponse, error) {
	var resp VendorOrderResponse
	if err := f.Future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Select adds the activity's completion to the selector, callback can be nil
func (f *GetVendorOrderFuture) Select(sel workflow.Selector, fn func(*GetVendorOrderFuture)) workflow.Selector {
	return sel.AddFuture(f.Future, func(workflow.Future) {
		if fn != nil {
			fn(f)
		}
	})
}

// GetVendorOrder executes a(n) temporal.Processing.GetVendorOrder activity
func GetVendorOrder(ctx workflow.Context, req *VendorOrderRequest, options ...*GetVendorOrderActivityOptions) (*VendorOrderResponse, error) {
	return GetVendorOrderAsync(ctx, req, options...).Get(ctx)
}

// GetVendorOrderAsync executes a(n) temporal.Processing.GetVendorOrder activity (asynchronously)
func GetVendorOrderAsync(ctx workflow.Context, req *VendorOrderRequest, options ...*GetVendorOrderActivityOptions) *GetVendorOrderFuture {
	var o *GetVendorOrderActivityOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewGetVendorOrderActivityOptions()
	}
	var err error
	if ctx, err = o.Build(ctx); err != nil {
		errF, errS := workflow.NewFuture(ctx)
		errS.SetError(err)
		return &GetVendorOrderFuture{Future: errF}
	}
	activity := GetVendorOrderActivityName
	future := &GetVendorOrderFuture{Future: workflow.ExecuteActivity(ctx, activity, req)}
	return future
}

// GetVendorOrderLocal executes a(n) temporal.Processing.GetVendorOrder activity (locally)
func GetVendorOrderLocal(ctx workflow.Context, req *VendorOrderRequest, options ...*GetVendorOrderLocalActivityOptions) (*VendorOrderResponse, error) {
	return GetVendorOrderLocalAsync(ctx, req, options...).Get(ctx)
}

// GetVendorOrderLocalAsync executes a(n) temporal.Processing.GetVendorOrder activity (asynchronously, locally)
func GetVendorOrderLocalAsync(ctx workflow.Context, req *VendorOrderRequest, options ...*GetVendorOrderLocalActivityOptions) *GetVendorOrderFuture {
	var o *GetVendorOrderLocalActivityOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewGetVendorOrderLocalActivityOptions()
	}
	var err error
	if ctx, err = o.Build(ctx); err != nil {
		errF, errS := workflow.NewFuture(ctx)
		errS.SetError(err)
		return &GetVendorOrderFuture{Future: errF}
	}
	var activity any
	if o.fn != nil {
		activity = o.fn
	} else {
		activity = GetVendorOrderActivityName
	}
	future := &GetVendorOrderFuture{Future: workflow.ExecuteLocalActivity(ctx, activity, req)}
	return future
}

// GetVendorOrderActivityOptions provides configuration for a(n) temporal.Processing.GetVendorOrder activity
type GetVendorOrderActivityOptions struct {
	options                workflow.ActivityOptions
	retryPolicy            *temporal.RetryPolicy
	scheduleToCloseTimeout *time.Duration
	startToCloseTimeout    *time.Duration
	heartbeatTimeout       *time.Duration
	scheduleToStartTimeout *time.Duration
	taskQueue              *string
	waitForCancellation    *bool
}

// NewGetVendorOrderActivityOptions initializes a new GetVendorOrderActivityOptions value
func NewGetVendorOrderActivityOptions() *GetVendorOrderActivityOptions {
	return &GetVendorOrderActivityOptions{}
}

// Build initializes a workflow.Context with appropriate ActivityOptions values derived from schema defaults and any user-defined overrides
func (o *GetVendorOrderActivityOptions) Build(ctx workflow.Context) (workflow.Context, error) {
	opts := o.options
	if v := o.heartbeatTimeout; v != nil {
		opts.HeartbeatTimeout = *v
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	} else if opts.RetryPolicy == nil {
		opts.RetryPolicy = &temporal.RetryPolicy{MaximumAttempts: int32(1)}
	}
	if v := o.scheduleToCloseTimeout; v != nil {
		opts.ScheduleToCloseTimeout = *v
	}
	if v := o.scheduleToStartTimeout; v != nil {
		opts.ScheduleToStartTimeout = *v
	}
	if v := o.startToCloseTimeout; v != nil {
		opts.StartToCloseTimeout = *v
	} else if opts.StartToCloseTimeout == 0 {
		opts.StartToCloseTimeout = 15000000000 // 15 seconds
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = ProcessingTaskQueue
	}
	if v := o.waitForCancellation; v != nil {
		opts.WaitForCancellation = *v
	}
	return workflow.WithActivityOptions(ctx, opts), nil
}

// WithActivityOptions specifies an initial ActivityOptions value to which defaults will be applied
func (o *GetVendorOrderActivityOptions) WithActivityOptions(options workflow.ActivityOptions) *GetVendorOrderActivityOptions {
	o.options = options
	return o
}

// WithHeartbeatTimeout sets the HeartbeatTimeout value
func (o *GetVendorOrderActivityOptions) WithHeartbeatTimeout(d time.Duration) *GetVendorOrderActivityOptions {
	o.heartbeatTimeout = &d
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *GetVendorOrderActivityOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *GetVendorOrderActivityOptions {
	o.retryPolicy = policy
	return o
}

// WithScheduleToCloseTimeout sets the ScheduleToCloseTimeout value
func (o *GetVendorOrderActivityOptions) WithScheduleToCloseTimeout(d time.Duration) *GetVendorOrderActivityOptions {
	o.scheduleToCloseTimeout = &d
	return o
}

// WithScheduleToStartTimeout sets the ScheduleToStartTimeout value
func (o *GetVendorOrderActivityOptions) WithScheduleToStartTimeout(d time.Duration) *GetVendorOrderActivityOptions {
	o.scheduleToStartTimeout = &d
	return o
}

// WithStartToCloseTimeout sets the StartToCloseTimeout value
func (o *GetVendorOrderActivityOptions) WithStartToCloseTimeout(d time.Duration) *GetVendorOrderActivityOptions {
	o.startToCloseTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *GetVendorOrderActivityOptions) WithTaskQueue(tq string) *GetVendorOrderActivityOptions {
	o.taskQueue = &tq
	return o
}

// WithWaitForCancellation sets the WaitForCancellation value
func (o *GetVendorOrderActivityOptions) WithWaitForCancellation(wait bool) *GetVendorOrderActivityOptions {
	o.waitForCancellation = &wait
	return o
}

// GetVendorOrderLocalActivityOptions provides configuration for a(n) temporal.Processing.GetVendorOrder activity
type GetVendorOrderLocalActivityOptions struct {
	options                workflow.LocalActivityOptions
	retryPolicy            *temporal.RetryPolicy
	scheduleToCloseTimeout *time.Duration
	startToCloseTimeout    *time.Duration
	fn                     func(context.Context, *VendorOrderRequest) (*VendorOrderResponse, error)
}

// NewGetVendorOrderLocalActivityOptions initializes a new GetVendorOrderLocalActivityOptions value
func NewGetVendorOrderLocalActivityOptions() *GetVendorOrderLocalActivityOptions {
	return &GetVendorOrderLocalActivityOptions{}
}

// Build initializes a workflow.Context with appropriate LocalActivityOptions values derived from schema defaults and any user-defined overrides
func (o *GetVendorOrderLocalActivityOptions) Build(ctx workflow.Context) (workflow.Context, error) {
	opts := o.options
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	} else if opts.RetryPolicy == nil {
		opts.RetryPolicy = &temporal.RetryPolicy{MaximumAttempts: int32(1)}
	}
	if v := o.scheduleToCloseTimeout; v != nil {
		opts.ScheduleToCloseTimeout = *v
	}
	if v := o.startToCloseTimeout; v != nil {
		opts.StartToCloseTimeout = *v
	} else if opts.StartToCloseTimeout == 0 {
		opts.StartToCloseTimeout = 15000000000 // 15 seconds
	}
	return workflow.WithLocalActivityOptions(ctx, opts), nil
}

// Local specifies a custom temporal.Processing.GetVendorOrder implementation
func (o *GetVendorOrderLocalActivityOptions) Local(fn func(context.Context, *VendorOrderRequest) (*VendorOrderResponse, error)) *GetVendorOrderLocalActivityOptions {
	o.fn = fn
	return o
}

// WithLocalActivityOptions specifies an initial LocalActivityOptions value to which defaults will be applied
func (o *GetVendorOrderLocalActivityOptions) WithLocalActivityOptions(options workflow.LocalActivityOptions) *GetVendorOrderLocalActivityOptions {
	o.options = options
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *GetVendorOrderLocalActivityOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *GetVendorOrderLocalActivityOptions {
	o.retryPolicy = policy
	return o
}

// WithScheduleToCloseTimeout sets the ScheduleToCloseTimeout value
func (o *GetVendorOrderLocalActivityOptions) WithScheduleToCloseTimeout(d time.Duration) *GetVendorOrderLocalActivityOptions {
	o.scheduleToCloseTimeout = &d
	return o
}

// WithStartToCloseTimeout sets the StartToCloseTimeout value
func (o *GetVendorOrderLocalActivityOptions) WithStartToCloseTimeout(d time.Duration) *GetVendorOrderLocalActivityOptions {
	o.startToCloseTimeout = &d
	return o
}

// TestClient provides a testsuite-compatible Client
type TestProcessingClient struct {
	env       *testsuite.TestWorkflowEnvironment
	workflows ProcessingWorkflows
}

var _ ProcessingClient = &TestProcessingClient{}

// NewTestProcessingClient initializes a new TestProcessingClient value
func NewTestProcessingClient(env *testsuite.TestWorkflowEnvironment, workflows ProcessingWorkflows, activities ProcessingActivities) *TestProcessingClient {
	if workflows != nil {
		RegisterProcessingWorkflows(env, workflows)
	}
	if activities != nil {
		RegisterProcessingActivities(env, activities)
	}
	return &TestProcessingClient{env, workflows}
}

// ProcessingFlow executes a(n) temporal.Processing.ProcessingFlow workflow in the test environment
func (c *TestProcessingClient) ProcessingFlow(ctx context.Context, req *ProcessingFlowRequest, opts ...*ProcessingFlowOptions) error {
	run, err := c.ProcessingFlowAsync(ctx, req, opts...)
	if err != nil {
		return err
	}
	return run.Get(ctx)
}

// ProcessingFlowAsync executes a(n) temporal.Processing.ProcessingFlow workflow in the test environment
func (c *TestProcessingClient) ProcessingFlowAsync(ctx context.Context, req *ProcessingFlowRequest, options ...*ProcessingFlowOptions) (ProcessingFlowRun, error) {
	var o *ProcessingFlowOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewProcessingFlowOptions()
	}
	opts, err := o.Build(req.ProtoReflect())
	if err != nil {
		return nil, fmt.Errorf("error initializing client.StartWorkflowOptions: %w", err)
	}
	return &testProcessingFlowRun{client: c, env: c.env, opts: &opts, req: req, workflows: c.workflows}, nil
}

// GetProcessingFlow is a noop
func (c *TestProcessingClient) GetProcessingFlow(ctx context.Context, workflowID string, runID string) ProcessingFlowRun {
	return &testProcessingFlowRun{env: c.env, workflows: c.workflows}
}

// CancelWorkflow requests cancellation of an existing workflow execution
func (c *TestProcessingClient) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	c.env.CancelWorkflow()
	return nil
}

// TerminateWorkflow terminates an existing workflow execution
func (c *TestProcessingClient) TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error {
	return c.CancelWorkflow(ctx, workflowID, runID)
}

// GetOrder executes a temporal.Processing.GetOrder query
func (c *TestProcessingClient) GetOrder(ctx context.Context, workflowID string, runID string) (*Order, error) {
	val, err := c.env.QueryWorkflow(GetOrderQueryName)
	if err != nil {
		return nil, err
	} else if !val.HasValue() {
		return nil, nil
	} else {
		var result Order
		if err := val.Get(&result); err != nil {
			return nil, err
		}
		return &result, nil
	}
}

var _ ProcessingFlowRun = &testProcessingFlowRun{}

// testProcessingFlowRun provides convenience methods for interacting with a(n) temporal.Processing.ProcessingFlow workflow in the test environment
type testProcessingFlowRun struct {
	client    *TestProcessingClient
	env       *testsuite.TestWorkflowEnvironment
	opts      *client.StartWorkflowOptions
	req       *ProcessingFlowRequest
	workflows ProcessingWorkflows
}

// Cancel requests cancellation of a workflow in execution, returning an error if applicable
func (r *testProcessingFlowRun) Cancel(ctx context.Context) error {
	return r.client.CancelWorkflow(ctx, r.ID(), r.RunID())
}

// Get retrieves a test temporal.Processing.ProcessingFlow workflow result
func (r *testProcessingFlowRun) Get(context.Context) error {
	r.env.ExecuteWorkflow(ProcessingFlowWorkflowName, r.req)
	if !r.env.IsWorkflowCompleted() {
		return errors.New("workflow in progress")
	}
	if err := r.env.GetWorkflowError(); err != nil {
		return err
	}
	return nil
}

// ID returns a test temporal.Processing.ProcessingFlow workflow run's workflow ID
func (r *testProcessingFlowRun) ID() string {
	if r.opts != nil {
		return r.opts.ID
	}
	return ""
}

// Run noop implementation
func (r *testProcessingFlowRun) Run() client.WorkflowRun {
	return nil
}

// RunID noop implementation
func (r *testProcessingFlowRun) RunID() string {
	return ""
}

// Terminate terminates a workflow in execution, returning an error if applicable
func (r *testProcessingFlowRun) Terminate(ctx context.Context, reason string, details ...interface{}) error {
	return r.client.TerminateWorkflow(ctx, r.ID(), r.RunID(), reason, details...)
}

// GetOrder executes a temporal.Processing.GetOrder query against a test temporal.Processing.ProcessingFlow workflow
func (r *testProcessingFlowRun) GetOrder(ctx context.Context) (*Order, error) {
	return r.client.GetOrder(ctx, r.ID(), r.RunID())
}

// ProcessingCliOptions describes runtime configuration for temporal.Processing cli
type ProcessingCliOptions struct {
	after            func(*v2.Context) error
	before           func(*v2.Context) error
	clientForCommand func(*v2.Context) (client.Client, error)
	worker           func(*v2.Context, client.Client) (worker.Worker, error)
}

// NewProcessingCliOptions initializes a new ProcessingCliOptions value
func NewProcessingCliOptions() *ProcessingCliOptions {
	return &ProcessingCliOptions{}
}

// WithAfter injects a custom After hook to be run after any command invocation
func (opts *ProcessingCliOptions) WithAfter(fn func(*v2.Context) error) *ProcessingCliOptions {
	opts.after = fn
	return opts
}

// WithBefore injects a custom Before hook to be run prior to any command invocation
func (opts *ProcessingCliOptions) WithBefore(fn func(*v2.Context) error) *ProcessingCliOptions {
	opts.before = fn
	return opts
}

// WithClient provides a Temporal client factory for use by commands
func (opts *ProcessingCliOptions) WithClient(fn func(*v2.Context) (client.Client, error)) *ProcessingCliOptions {
	opts.clientForCommand = fn
	return opts
}

// WithWorker provides an method for initializing a worker
func (opts *ProcessingCliOptions) WithWorker(fn func(*v2.Context, client.Client) (worker.Worker, error)) *ProcessingCliOptions {
	opts.worker = fn
	return opts
}

// NewProcessingCli initializes a cli for a(n) temporal.Processing service
func NewProcessingCli(options ...*ProcessingCliOptions) (*v2.App, error) {
	commands, err := newProcessingCommands(options...)
	if err != nil {
		return nil, fmt.Errorf("error initializing subcommands: %w", err)
	}
	return &v2.App{
		Name:     "processing",
		Commands: commands,
	}, nil
}

// NewProcessingCliCommand initializes a cli command for a temporal.Processing service with subcommands for each query, signal, update, and workflow
func NewProcessingCliCommand(options ...*ProcessingCliOptions) (*v2.Command, error) {
	subcommands, err := newProcessingCommands(options...)
	if err != nil {
		return nil, fmt.Errorf("error initializing subcommands: %w", err)
	}
	return &v2.Command{
		Name:        "processing",
		Subcommands: subcommands,
	}, nil
}

// newProcessingCommands initializes (sub)commands for a temporal.Processing cli or command
func newProcessingCommands(options ...*ProcessingCliOptions) ([]*v2.Command, error) {
	opts := &ProcessingCliOptions{}
	if len(options) > 0 {
		opts = options[0]
	}
	if opts.clientForCommand == nil {
		opts.clientForCommand = func(*v2.Context) (client.Client, error) {
			return client.Dial(client.Options{})
		}
	}
	commands := []*v2.Command{
		{
			Name:                   "get-order",
			Usage:                  "executes a temporal.Processing.GetOrder query and blocks until error or response received",
			Category:               "QUERIES",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.StringFlag{
					Name:     "workflow-id",
					Usage:    "workflow id",
					Required: true,
					Aliases:  []string{"w"},
				},
				&v2.StringFlag{
					Name:    "run-id",
					Usage:   "run id",
					Aliases: []string{"r"},
				},
			},
			Action: func(cmd *v2.Context) error {
				c, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer c.Close()
				client := NewProcessingClient(c)
				if resp, err := client.GetOrder(cmd.Context, cmd.String("workflow-id"), cmd.String("run-id")); err != nil {
					return fmt.Errorf("error executing %q query: %w", GetOrderQueryName, err)
				} else {
					b, err := protojson.Marshal(resp)
					if err != nil {
						return fmt.Errorf("error serializing response json: %w", err)
					}
					var out bytes.Buffer
					if err := json.Indent(&out, b, "", "  "); err != nil {
						return fmt.Errorf("error formatting json: %w", err)
					}
					fmt.Println(out.String())
					return nil
				}
			},
		},
		{
			Name:                   "processing-flow",
			Usage:                  "executes a(n) temporal.Processing.ProcessingFlow workflow",
			Category:               "WORKFLOWS",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.BoolFlag{
					Name:    "detach",
					Usage:   "run workflow in the background and print workflow and execution id",
					Aliases: []string{"d"},
				},
				&v2.StringFlag{
					Name:    "task-queue",
					Usage:   "task queue name",
					Aliases: []string{"t"},
					EnvVars: []string{"TEMPORAL_TASK_QUEUE_NAME", "TEMPORAL_TASK_QUEUE", "TASK_QUEUE_NAME", "TASK_QUEUE"},
					Value:   "general",
				},
				&v2.StringFlag{
					Name:    "input-file",
					Usage:   "path to json-formatted input file",
					Aliases: []string{"f"},
				},
				&v2.StringFlag{
					Name:     "id",
					Usage:    "set the value of the operation's \"Id\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "customer",
					Usage:    "set the value of the operation's \"Customer\" parameter (json-encoded: {id: <string>, name: <string>, phone: <string>, address: <temporal.Address>})",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "cart",
					Usage:    "set the value of the operation's \"Cart\" parameter (json-encoded: {products: <temporal.Product>, total: <int32>, id: <string>})",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "payment-type",
					Usage:    "set the value of the operation's \"PaymentType\" parameter (CASH, ONLINE)",
					Category: "INPUT",
				},
			},
			Action: func(cmd *v2.Context) error {
				tc, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer tc.Close()
				c := NewProcessingClient(tc)
				req, err := UnmarshalCliFlagsToProcessingFlowRequest(cmd)
				if err != nil {
					return fmt.Errorf("error unmarshalling request: %w", err)
				}
				opts := client.StartWorkflowOptions{}
				if tq := cmd.String("task-queue"); tq != "" {
					opts.TaskQueue = tq
				}
				run, err := c.ProcessingFlowAsync(cmd.Context, req, NewProcessingFlowOptions().WithStartWorkflowOptions(opts))
				if err != nil {
					return fmt.Errorf("error starting %s workflow: %w", ProcessingFlowWorkflowName, err)
				}
				if cmd.Bool("detach") {
					fmt.Println("success")
					fmt.Printf("workflow id: %s\n", run.ID())
					fmt.Printf("run id: %s\n", run.RunID())
					return nil
				}
				if err := run.Get(cmd.Context); err != nil {
					return err
				} else {
					return nil
				}
			},
		},
	}
	if opts.worker != nil {
		commands = append(commands, []*v2.Command{
			{
				Name:                   "worker",
				Usage:                  "runs a temporal.Processing worker process",
				UseShortOptionHandling: true,
				Before:                 opts.before,
				After:                  opts.after,
				Action: func(cmd *v2.Context) error {
					c, err := opts.clientForCommand(cmd)
					if err != nil {
						return fmt.Errorf("error initializing client for command: %w", err)
					}
					defer c.Close()
					w, err := opts.worker(cmd, c)
					if opts.worker != nil {
						if err != nil {
							return fmt.Errorf("error initializing worker: %w", err)
						}
					}
					if err := w.Start(); err != nil {
						return fmt.Errorf("error starting worker: %w", err)
					}
					defer w.Stop()
					<-cmd.Context.Done()
					return nil
				},
			},
		}...)
	}
	sort.Slice(commands, func(i, j int) bool {
		return commands[i].Name < commands[j].Name
	})
	return commands, nil
}

// UnmarshalCliFlagsToProcessingFlowRequest unmarshals a ProcessingFlowRequest from command line flags
func UnmarshalCliFlagsToProcessingFlowRequest(cmd *v2.Context) (*ProcessingFlowRequest, error) {
	var result ProcessingFlowRequest
	var hasValues bool
	if cmd.IsSet("input-file") {
		inputFile, err := gohomedir.Expand(cmd.String("input-file"))
		if err != nil {
			inputFile = cmd.String("input-file")
		}
		b, err := os.ReadFile(inputFile)
		if err != nil {
			return nil, fmt.Errorf("error reading input-file: %w", err)
		}
		if err := protojson.Unmarshal(b, &result); err != nil {
			return nil, fmt.Errorf("error parsing input-file json: %w", err)
		}
		hasValues = true
	}
	if cmd.IsSet("id") {
		hasValues = true
		result.Id = cmd.String("id")
	}
	if cmd.IsSet("customer") {
		hasValues = true
		var v Profile
		if err := protojson.Unmarshal([]byte(cmd.String("customer")), &v); err != nil {
			return nil, fmt.Errorf("error unmarshalling \"customer\" flag: %w", err)
		}
		result.Customer = &v
	}
	if cmd.IsSet("cart") {
		hasValues = true
		var v Cart
		if err := protojson.Unmarshal([]byte(cmd.String("cart")), &v); err != nil {
			return nil, fmt.Errorf("error unmarshalling \"cart\" flag: %w", err)
		}
		result.Cart = &v
	}
	if cmd.IsSet("payment-type") {
		hasValues = true
		v, ok := PaymentType_value[cmd.String("payment-type")]
		if !ok {
			return nil, fmt.Errorf("unsupported enum value for \"payment-type\" flag: %q", cmd.String("payment-type"))
		}
		result.PaymentType = PaymentType(v)
	}
	if !hasValues {
		return nil, nil
	}
	return &result, nil
}
