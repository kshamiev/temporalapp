// Code generated by protoc-gen-go_temporal. DO NOT EDIT.
// versions:
//
//	protoc-gen-go_temporal dev (latest)
//	go go1.22.2
//	protoc major:4 minor:25 patch:1 suffix:""
//
// source: sample.proto
package temporal

import (
	"context"
	"errors"
	"fmt"
	expression "github.com/cludden/protoc-gen-go-temporal/pkg/expression"
	helpers "github.com/cludden/protoc-gen-go-temporal/pkg/helpers"
	v2 "github.com/urfave/cli/v2"
	enumsv1 "go.temporal.io/api/enums/v1"
	client "go.temporal.io/sdk/client"
	temporal "go.temporal.io/sdk/temporal"
	testsuite "go.temporal.io/sdk/testsuite"
	worker "go.temporal.io/sdk/worker"
	workflow "go.temporal.io/sdk/workflow"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	"log/slog"
	"sort"
	"time"
)

// SampleTaskQueue is the default task-queue for a temporal.Sample worker
const SampleTaskQueue = "general"

// temporal.Sample workflow names
const (
	CreateWorkflowName = "temporal.Sample.Create"
)

// temporal.Sample workflow id expressions
var (
	CreateIdexpression = expression.MustParseExpression("sample/${! customerId.or(id.or(uuid_v4())) }")
)

// SampleClient describes a client for a(n) temporal.Sample worker
type SampleClient interface {
	// Это основной workflow, представляющий жизненный цикл пользователя
	Create(ctx context.Context, opts ...*CreateOptions) error

	// CreateAsync starts a(n) temporal.Sample.Create workflow and returns a handle to the workflow run
	CreateAsync(ctx context.Context, opts ...*CreateOptions) (CreateRun, error)

	// GetCreate retrieves a handle to an existing temporal.Sample.Create workflow execution
	GetCreate(ctx context.Context, workflowID string, runID string) CreateRun

	// CancelWorkflow requests cancellation of an existing workflow execution
	CancelWorkflow(ctx context.Context, workflowID string, runID string) error

	// TerminateWorkflow an existing workflow execution
	TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error
}

// sampleClient implements a temporal client for a temporal.Sample service
type sampleClient struct {
	client client.Client
	log    *slog.Logger
}

// NewSampleClient initializes a new temporal.Sample client
func NewSampleClient(c client.Client, options ...*sampleClientOptions) SampleClient {
	var cfg *sampleClientOptions
	if len(options) > 0 {
		cfg = options[0]
	} else {
		cfg = NewSampleClientOptions()
	}
	return &sampleClient{
		client: c,
		log:    cfg.getLogger(),
	}
}

// NewSampleClientWithOptions initializes a new Sample client with the given options
func NewSampleClientWithOptions(c client.Client, opts client.Options, options ...*sampleClientOptions) (SampleClient, error) {
	var err error
	c, err = client.NewClientFromExisting(c, opts)
	if err != nil {
		return nil, fmt.Errorf("error initializing client with options: %w", err)
	}
	var cfg *sampleClientOptions
	if len(options) > 0 {
		cfg = options[0]
	} else {
		cfg = NewSampleClientOptions()
	}
	return &sampleClient{
		client: c,
		log:    cfg.getLogger(),
	}, nil
}

// sampleClientOptions describes optional runtime configuration for a SampleClient
type sampleClientOptions struct {
	log *slog.Logger
}

// NewSampleClientOptions initializes a new sampleClientOptions value
func NewSampleClientOptions() *sampleClientOptions {
	return &sampleClientOptions{}
}

// WithLogger can be used to override the default logger
func (opts *sampleClientOptions) WithLogger(l *slog.Logger) *sampleClientOptions {
	if l != nil {
		opts.log = l
	}
	return opts
}

// getLogger returns the configured logger, or the default logger
func (opts *sampleClientOptions) getLogger() *slog.Logger {
	if opts != nil && opts.log != nil {
		return opts.log
	}
	return slog.Default()
}

// Это основной workflow, представляющий жизненный цикл пользователя
func (c *sampleClient) Create(ctx context.Context, options ...*CreateOptions) error {
	run, err := c.CreateAsync(ctx, options...)
	if err != nil {
		return err
	}
	return run.Get(ctx)
}

// Это основной workflow, представляющий жизненный цикл пользователя
func (c *sampleClient) CreateAsync(ctx context.Context, options ...*CreateOptions) (CreateRun, error) {
	var o *CreateOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewCreateOptions()
	}
	opts, err := o.Build(nil)
	if err != nil {
		return nil, fmt.Errorf("error initializing client.StartWorkflowOptions: %w", err)
	}
	run, err := c.client.ExecuteWorkflow(ctx, opts, CreateWorkflowName)
	if err != nil {
		return nil, err
	}
	if run == nil {
		return nil, errors.New("execute workflow returned nil run")
	}
	return &createRun{
		client: c,
		run:    run,
	}, nil
}

// GetCreate fetches an existing temporal.Sample.Create execution
func (c *sampleClient) GetCreate(ctx context.Context, workflowID string, runID string) CreateRun {
	return &createRun{
		client: c,
		run:    c.client.GetWorkflow(ctx, workflowID, runID),
	}
}

// CancelWorkflow requests cancellation of an existing workflow execution
func (c *sampleClient) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	return c.client.CancelWorkflow(ctx, workflowID, runID)
}

// TerminateWorkflow terminates an existing workflow execution
func (c *sampleClient) TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error {
	return c.client.TerminateWorkflow(ctx, workflowID, runID, reason, details...)
}

// CreateOptions provides configuration for a temporal.Sample.Create workflow operation
type CreateOptions struct {
	options          client.StartWorkflowOptions
	executionTimeout *time.Duration
	id               *string
	idReusePolicy    enumsv1.WorkflowIdReusePolicy
	retryPolicy      *temporal.RetryPolicy
	runTimeout       *time.Duration
	searchAttributes map[string]any
	taskQueue        *string
	taskTimeout      *time.Duration
}

// NewCreateOptions initializes a new CreateOptions value
func NewCreateOptions() *CreateOptions {
	return &CreateOptions{}
}

// Build initializes a new go.temporal.io/sdk/client.StartWorkflowOptions value with defaults and overrides applied
func (o *CreateOptions) Build(req protoreflect.Message) (client.StartWorkflowOptions, error) {
	opts := o.options
	if v := o.id; v != nil {
		opts.ID = *v
	} else if opts.ID == "" {
		id, err := expression.EvalExpression(CreateIdexpression, req)
		if err != nil {
			return opts, fmt.Errorf("error evaluating id expression for %q workflow: %w", CreateWorkflowName, err)
		}
		opts.ID = id
	}
	if v := o.idReusePolicy; v != enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = v
	} else if opts.WorkflowIDReusePolicy == enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = enumsv1.WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = SampleTaskQueue
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.searchAttributes; v != nil {
		opts.SearchAttributes = o.searchAttributes
	}
	if v := o.executionTimeout; v != nil {
		opts.WorkflowExecutionTimeout = *v
	}
	if v := o.runTimeout; v != nil {
		opts.WorkflowRunTimeout = *v
	}
	if v := o.taskTimeout; v != nil {
		opts.WorkflowTaskTimeout = *v
	}
	return opts, nil
}

// WithStartWorkflowOptions sets the initial go.temporal.io/sdk/client.StartWorkflowOptions
func (o *CreateOptions) WithStartWorkflowOptions(options client.StartWorkflowOptions) *CreateOptions {
	o.options = options
	return o
}

// WithExecutionTimeout sets the WorkflowExecutionTimeout value
func (o *CreateOptions) WithExecutionTimeout(d time.Duration) *CreateOptions {
	o.executionTimeout = &d
	return o
}

// WithID sets the ID value
func (o *CreateOptions) WithID(id string) *CreateOptions {
	o.id = &id
	return o
}

// WithIDReusePolicy sets the WorkflowIDReusePolicy value
func (o *CreateOptions) WithIDReusePolicy(policy enumsv1.WorkflowIdReusePolicy) *CreateOptions {
	o.idReusePolicy = policy
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *CreateOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *CreateOptions {
	o.retryPolicy = policy
	return o
}

// WithRunTimeout sets the WorkflowRunTimeout value
func (o *CreateOptions) WithRunTimeout(d time.Duration) *CreateOptions {
	o.runTimeout = &d
	return o
}

// WithSearchAttributes sets the SearchAttributes value
func (o *CreateOptions) WithSearchAttributes(sa map[string]any) *CreateOptions {
	o.searchAttributes = sa
	return o
}

// WithTaskTimeout sets the WorkflowTaskTimeout value
func (o *CreateOptions) WithTaskTimeout(d time.Duration) *CreateOptions {
	o.taskTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *CreateOptions) WithTaskQueue(tq string) *CreateOptions {
	o.taskQueue = &tq
	return o
}

// CreateRun describes a(n) temporal.Sample.Create workflow run
type CreateRun interface {
	// ID returns the workflow ID
	ID() string

	// RunID returns the workflow instance ID
	RunID() string

	// Run returns the inner client.WorkflowRun
	Run() client.WorkflowRun

	// Get blocks until the workflow is complete and returns the result
	Get(ctx context.Context) error

	// Cancel requests cancellation of a workflow in execution, returning an error if applicable
	Cancel(ctx context.Context) error

	// Terminate terminates a workflow in execution, returning an error if applicable
	Terminate(ctx context.Context, reason string, details ...interface{}) error
}

// createRun provides an internal implementation of a(n) CreateRunRun
type createRun struct {
	client *sampleClient
	run    client.WorkflowRun
}

// ID returns the workflow ID
func (r *createRun) ID() string {
	return r.run.GetID()
}

// Run returns the inner client.WorkflowRun
func (r *createRun) Run() client.WorkflowRun {
	return r.run
}

// RunID returns the execution ID
func (r *createRun) RunID() string {
	return r.run.GetRunID()
}

// Cancel requests cancellation of a workflow in execution, returning an error if applicable
func (r *createRun) Cancel(ctx context.Context) error {
	return r.client.CancelWorkflow(ctx, r.ID(), r.RunID())
}

// Get blocks until the workflow is complete, returning the result if applicable
func (r *createRun) Get(ctx context.Context) error {
	return r.run.Get(ctx, nil)
}

// Terminate terminates a workflow in execution, returning an error if applicable
func (r *createRun) Terminate(ctx context.Context, reason string, details ...interface{}) error {
	return r.client.TerminateWorkflow(ctx, r.ID(), r.RunID(), reason, details...)
}

// Reference to generated workflow functions
var (
	// Это основной workflow, представляющий жизненный цикл пользователя
	CreateFunction func(workflow.Context) error
)

// SampleWorkflowFunctions describes a mockable dependency for inlining workflows within other workflows
type (
	// SampleWorkflowFunctions describes a mockable dependency for inlining workflows within other workflows
	SampleWorkflowFunctions interface {
		// Это основной workflow, представляющий жизненный цикл пользователя
		Create(workflow.Context) error
	}
	// sampleWorkflowFunctions provides an internal SampleWorkflowFunctions implementation
	sampleWorkflowFunctions struct{}
)

func NewSampleWorkflowFunctions() SampleWorkflowFunctions {
	return &sampleWorkflowFunctions{}
}

// Это основной workflow, представляющий жизненный цикл пользователя
func (f *sampleWorkflowFunctions) Create(ctx workflow.Context) error {
	if CreateFunction == nil {
		return errors.New("Create requires workflow registration via RegisterSampleWorkflows or RegisterCreateWorkflow")
	}
	return CreateFunction(ctx)
}

// SampleWorkflows provides methods for initializing new temporal.Sample workflow values
type SampleWorkflows interface {
	// Это основной workflow, представляющий жизненный цикл пользователя
	Create(ctx workflow.Context, input *CreateWorkflowInput) (CreateWorkflow, error)
}

// RegisterSampleWorkflows registers temporal.Sample workflows with the given worker
func RegisterSampleWorkflows(r worker.WorkflowRegistry, workflows SampleWorkflows) {
	RegisterCreateWorkflow(r, workflows.Create)
}

// RegisterCreateWorkflow registers a temporal.Sample.Create workflow with the given worker
func RegisterCreateWorkflow(r worker.WorkflowRegistry, wf func(workflow.Context, *CreateWorkflowInput) (CreateWorkflow, error)) {
	CreateFunction = buildCreate(wf)
	r.RegisterWorkflowWithOptions(CreateFunction, workflow.RegisterOptions{Name: CreateWorkflowName})
}

// buildCreate converts a Create workflow struct into a valid workflow function
func buildCreate(ctor func(workflow.Context, *CreateWorkflowInput) (CreateWorkflow, error)) func(workflow.Context) error {
	return func(ctx workflow.Context) error {
		input := &CreateWorkflowInput{}
		wf, err := ctor(ctx, input)
		if err != nil {
			return err
		}
		if initializable, ok := wf.(helpers.Initializable); ok {
			if err := initializable.Initialize(ctx); err != nil {
				return err
			}
		}
		return wf.Execute(ctx)
	}
}

// CreateWorkflowInput describes the input to a(n) temporal.Sample.Create workflow constructor
type CreateWorkflowInput struct{}

// Это основной workflow, представляющий жизненный цикл пользователя
//
// workflow details: (name: "temporal.Sample.Create", id: "sample/${! customerId.or(id.or(uuid_v4())) }")
type CreateWorkflow interface {
	// Execute defines the entrypoint to a(n) temporal.Sample.Create workflow
	Execute(ctx workflow.Context) error
}

// Это основной workflow, представляющий жизненный цикл пользователя
func CreateChild(ctx workflow.Context, options ...*CreateChildOptions) error {
	childRun, err := CreateChildAsync(ctx, options...)
	if err != nil {
		return err
	}
	return childRun.Get(ctx)
}

// Это основной workflow, представляющий жизненный цикл пользователя
func CreateChildAsync(ctx workflow.Context, options ...*CreateChildOptions) (*CreateChildRun, error) {
	var o *CreateChildOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewCreateChildOptions()
	}
	opts, err := o.Build(ctx, nil)
	if err != nil {
		return nil, fmt.Errorf("error initializing workflow.ChildWorkflowOptions: %w", err)
	}
	ctx = workflow.WithChildOptions(ctx, opts)
	return &CreateChildRun{Future: workflow.ExecuteChildWorkflow(ctx, CreateWorkflowName, nil)}, nil
}

// CreateChildOptions provides configuration for a child temporal.Sample.Create workflow operation
type CreateChildOptions struct {
	options             workflow.ChildWorkflowOptions
	executionTimeout    *time.Duration
	id                  *string
	idReusePolicy       enumsv1.WorkflowIdReusePolicy
	retryPolicy         *temporal.RetryPolicy
	runTimeout          *time.Duration
	searchAttributes    map[string]any
	taskQueue           *string
	taskTimeout         *time.Duration
	parentClosePolicy   enumsv1.ParentClosePolicy
	waitForCancellation *bool
}

// NewCreateChildOptions initializes a new CreateChildOptions value
func NewCreateChildOptions() *CreateChildOptions {
	return &CreateChildOptions{}
}

// Build initializes a new go.temporal.io/sdk/workflow.ChildWorkflowOptions value with defaults and overrides applied
func (o *CreateChildOptions) Build(ctx workflow.Context, req protoreflect.Message) (workflow.ChildWorkflowOptions, error) {
	opts := o.options
	if v := o.id; v != nil {
		opts.WorkflowID = *v
	} else if opts.WorkflowID == "" {
		// wrap expression evaluation in local activity
		// more info: https://cludden.github.io/protoc-gen-go-temporal/docs/guides/patches#pv_64-expression-evaluation-local-activity
		if workflow.GetVersion(ctx, "cludden_protoc-gen-go-temporal_64_expression-evaluation-local-activity", workflow.DefaultVersion, 1) == 1 {
			lao := workflow.GetLocalActivityOptions(ctx)
			lao.ScheduleToCloseTimeout = time.Second * 10
			if err := workflow.ExecuteLocalActivity(workflow.WithLocalActivityOptions(ctx, lao), func(ctx context.Context) (string, error) {
				id, err := expression.EvalExpression(CreateIdexpression, req)
				if err != nil {
					return "", fmt.Errorf("error evaluating id expression for %q workflow: %w", CreateWorkflowName, err)
				}
				return id, nil
			}).Get(ctx, &opts.WorkflowID); err != nil {
				return opts, fmt.Errorf("error evaluating id expression for %q workflow: %w", CreateWorkflowName, err)
			}
		} else {
			id, err := expression.EvalExpression(CreateIdexpression, req)
			if err != nil {
				return opts, fmt.Errorf("error evaluating id expression for %q workflow: %w", CreateWorkflowName, err)
			}
			opts.WorkflowID = id
		}
	}
	if v := o.idReusePolicy; v != enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = v
	} else if opts.WorkflowIDReusePolicy == enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = enumsv1.WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = SampleTaskQueue
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.searchAttributes; v != nil {
		opts.SearchAttributes = o.searchAttributes
	}
	if v := o.executionTimeout; v != nil {
		opts.WorkflowExecutionTimeout = *v
	}
	if v := o.runTimeout; v != nil {
		opts.WorkflowRunTimeout = *v
	}
	if v := o.taskTimeout; v != nil {
		opts.WorkflowTaskTimeout = *v
	}
	if v := o.parentClosePolicy; v != enumsv1.PARENT_CLOSE_POLICY_UNSPECIFIED {
		opts.ParentClosePolicy = v
	}
	if v := o.waitForCancellation; v != nil {
		opts.WaitForCancellation = *v
	}
	return opts, nil
}

// WithChildWorkflowOptions sets the initial go.temporal.io/sdk/workflow.ChildWorkflowOptions
func (o *CreateChildOptions) WithChildWorkflowOptions(options workflow.ChildWorkflowOptions) *CreateChildOptions {
	o.options = options
	return o
}

// WithExecutionTimeout sets the WorkflowExecutionTimeout value
func (o *CreateChildOptions) WithExecutionTimeout(d time.Duration) *CreateChildOptions {
	o.executionTimeout = &d
	return o
}

// WithID sets the WorkflowID value
func (o *CreateChildOptions) WithID(id string) *CreateChildOptions {
	o.id = &id
	return o
}

// WithIDReusePolicy sets the WorkflowIDReusePolicy value
func (o *CreateChildOptions) WithIDReusePolicy(policy enumsv1.WorkflowIdReusePolicy) *CreateChildOptions {
	o.idReusePolicy = policy
	return o
}

// WithParentClosePolicy sets the WorkflowIDReusePolicy value
func (o *CreateChildOptions) WithParentClosePolicy(policy enumsv1.ParentClosePolicy) *CreateChildOptions {
	o.parentClosePolicy = policy
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *CreateChildOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *CreateChildOptions {
	o.retryPolicy = policy
	return o
}

// WithRunTimeout sets the WorkflowRunTimeout value
func (o *CreateChildOptions) WithRunTimeout(d time.Duration) *CreateChildOptions {
	o.runTimeout = &d
	return o
}

// WithSearchAttributes sets the SearchAttributes value
func (o *CreateChildOptions) WithSearchAttributes(sa map[string]any) *CreateChildOptions {
	o.searchAttributes = sa
	return o
}

// WithTaskTimeout sets the WorkflowTaskTimeout value
func (o *CreateChildOptions) WithTaskTimeout(d time.Duration) *CreateChildOptions {
	o.taskTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *CreateChildOptions) WithTaskQueue(tq string) *CreateChildOptions {
	o.taskQueue = &tq
	return o
}

// WithWaitForCancellation sets the WaitForCancellation value
func (o *CreateChildOptions) WithWaitForCancellation(wait bool) *CreateChildOptions {
	o.waitForCancellation = &wait
	return o
}

// CreateChildRun describes a child Create workflow run
type CreateChildRun struct {
	Future workflow.ChildWorkflowFuture
}

// Get blocks until the workflow is completed, returning the response value
func (r *CreateChildRun) Get(ctx workflow.Context) error {
	if err := r.Future.Get(ctx, nil); err != nil {
		return err
	}
	return nil
}

// Select adds this completion to the selector. Callback can be nil.
func (r *CreateChildRun) Select(sel workflow.Selector, fn func(*CreateChildRun)) workflow.Selector {
	return sel.AddFuture(r.Future, func(workflow.Future) {
		if fn != nil {
			fn(r)
		}
	})
}

// SelectStart adds waiting for start to the selector. Callback can be nil.
func (r *CreateChildRun) SelectStart(sel workflow.Selector, fn func(*CreateChildRun)) workflow.Selector {
	return sel.AddFuture(r.Future.GetChildWorkflowExecution(), func(workflow.Future) {
		if fn != nil {
			fn(r)
		}
	})
}

// WaitStart waits for the child workflow to start
func (r *CreateChildRun) WaitStart(ctx workflow.Context) (*workflow.Execution, error) {
	var exec workflow.Execution
	if err := r.Future.GetChildWorkflowExecution().Get(ctx, &exec); err != nil {
		return nil, err
	}
	return &exec, nil
}

// SampleActivities describes available worker activities
type SampleActivities interface{}

// RegisterSampleActivities registers activities with a worker
func RegisterSampleActivities(r worker.ActivityRegistry, activities SampleActivities) {}

// TestClient provides a testsuite-compatible Client
type TestSampleClient struct {
	env       *testsuite.TestWorkflowEnvironment
	workflows SampleWorkflows
}

var _ SampleClient = &TestSampleClient{}

// NewTestSampleClient initializes a new TestSampleClient value
func NewTestSampleClient(env *testsuite.TestWorkflowEnvironment, workflows SampleWorkflows, activities SampleActivities) *TestSampleClient {
	if workflows != nil {
		RegisterSampleWorkflows(env, workflows)
	}
	if activities != nil {
		RegisterSampleActivities(env, activities)
	}
	return &TestSampleClient{env, workflows}
}

// Create executes a(n) temporal.Sample.Create workflow in the test environment
func (c *TestSampleClient) Create(ctx context.Context, opts ...*CreateOptions) error {
	run, err := c.CreateAsync(ctx, opts...)
	if err != nil {
		return err
	}
	return run.Get(ctx)
}

// CreateAsync executes a(n) temporal.Sample.Create workflow in the test environment
func (c *TestSampleClient) CreateAsync(ctx context.Context, options ...*CreateOptions) (CreateRun, error) {
	var o *CreateOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewCreateOptions()
	}
	opts, err := o.Build(nil)
	if err != nil {
		return nil, fmt.Errorf("error initializing client.StartWorkflowOptions: %w", err)
	}
	return &testCreateRun{client: c, env: c.env, opts: &opts, workflows: c.workflows}, nil
}

// GetCreate is a noop
func (c *TestSampleClient) GetCreate(ctx context.Context, workflowID string, runID string) CreateRun {
	return &testCreateRun{env: c.env, workflows: c.workflows}
}

// CancelWorkflow requests cancellation of an existing workflow execution
func (c *TestSampleClient) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	c.env.CancelWorkflow()
	return nil
}

// TerminateWorkflow terminates an existing workflow execution
func (c *TestSampleClient) TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error {
	return c.CancelWorkflow(ctx, workflowID, runID)
}

var _ CreateRun = &testCreateRun{}

// testCreateRun provides convenience methods for interacting with a(n) temporal.Sample.Create workflow in the test environment
type testCreateRun struct {
	client    *TestSampleClient
	env       *testsuite.TestWorkflowEnvironment
	opts      *client.StartWorkflowOptions
	workflows SampleWorkflows
}

// Cancel requests cancellation of a workflow in execution, returning an error if applicable
func (r *testCreateRun) Cancel(ctx context.Context) error {
	return r.client.CancelWorkflow(ctx, r.ID(), r.RunID())
}

// Get retrieves a test temporal.Sample.Create workflow result
func (r *testCreateRun) Get(context.Context) error {
	r.env.ExecuteWorkflow(CreateWorkflowName)
	if !r.env.IsWorkflowCompleted() {
		return errors.New("workflow in progress")
	}
	if err := r.env.GetWorkflowError(); err != nil {
		return err
	}
	return nil
}

// ID returns a test temporal.Sample.Create workflow run's workflow ID
func (r *testCreateRun) ID() string {
	if r.opts != nil {
		return r.opts.ID
	}
	return ""
}

// Run noop implementation
func (r *testCreateRun) Run() client.WorkflowRun {
	return nil
}

// RunID noop implementation
func (r *testCreateRun) RunID() string {
	return ""
}

// Terminate terminates a workflow in execution, returning an error if applicable
func (r *testCreateRun) Terminate(ctx context.Context, reason string, details ...interface{}) error {
	return r.client.TerminateWorkflow(ctx, r.ID(), r.RunID(), reason, details...)
}

// SampleCliOptions describes runtime configuration for temporal.Sample cli
type SampleCliOptions struct {
	after            func(*v2.Context) error
	before           func(*v2.Context) error
	clientForCommand func(*v2.Context) (client.Client, error)
	worker           func(*v2.Context, client.Client) (worker.Worker, error)
}

// NewSampleCliOptions initializes a new SampleCliOptions value
func NewSampleCliOptions() *SampleCliOptions {
	return &SampleCliOptions{}
}

// WithAfter injects a custom After hook to be run after any command invocation
func (opts *SampleCliOptions) WithAfter(fn func(*v2.Context) error) *SampleCliOptions {
	opts.after = fn
	return opts
}

// WithBefore injects a custom Before hook to be run prior to any command invocation
func (opts *SampleCliOptions) WithBefore(fn func(*v2.Context) error) *SampleCliOptions {
	opts.before = fn
	return opts
}

// WithClient provides a Temporal client factory for use by commands
func (opts *SampleCliOptions) WithClient(fn func(*v2.Context) (client.Client, error)) *SampleCliOptions {
	opts.clientForCommand = fn
	return opts
}

// WithWorker provides an method for initializing a worker
func (opts *SampleCliOptions) WithWorker(fn func(*v2.Context, client.Client) (worker.Worker, error)) *SampleCliOptions {
	opts.worker = fn
	return opts
}

// NewSampleCli initializes a cli for a(n) temporal.Sample service
func NewSampleCli(options ...*SampleCliOptions) (*v2.App, error) {
	commands, err := newSampleCommands(options...)
	if err != nil {
		return nil, fmt.Errorf("error initializing subcommands: %w", err)
	}
	return &v2.App{
		Name:     "sample",
		Commands: commands,
	}, nil
}

// NewSampleCliCommand initializes a cli command for a temporal.Sample service with subcommands for each query, signal, update, and workflow
func NewSampleCliCommand(options ...*SampleCliOptions) (*v2.Command, error) {
	subcommands, err := newSampleCommands(options...)
	if err != nil {
		return nil, fmt.Errorf("error initializing subcommands: %w", err)
	}
	return &v2.Command{
		Name:        "sample",
		Subcommands: subcommands,
	}, nil
}

// newSampleCommands initializes (sub)commands for a temporal.Sample cli or command
func newSampleCommands(options ...*SampleCliOptions) ([]*v2.Command, error) {
	opts := &SampleCliOptions{}
	if len(options) > 0 {
		opts = options[0]
	}
	if opts.clientForCommand == nil {
		opts.clientForCommand = func(*v2.Context) (client.Client, error) {
			return client.Dial(client.Options{})
		}
	}
	commands := []*v2.Command{
		{
			Name:                   "create",
			Usage:                  "Это основной workflow, представляющий жизненный цикл пользователя",
			Category:               "WORKFLOWS",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.BoolFlag{
					Name:    "detach",
					Usage:   "run workflow in the background and print workflow and execution id",
					Aliases: []string{"d"},
				},
				&v2.StringFlag{
					Name:    "task-queue",
					Usage:   "task queue name",
					Aliases: []string{"t"},
					EnvVars: []string{"TEMPORAL_TASK_QUEUE_NAME", "TEMPORAL_TASK_QUEUE", "TASK_QUEUE_NAME", "TASK_QUEUE"},
					Value:   "general",
				},
			},
			Action: func(cmd *v2.Context) error {
				tc, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer tc.Close()
				c := NewSampleClient(tc)
				opts := client.StartWorkflowOptions{}
				if tq := cmd.String("task-queue"); tq != "" {
					opts.TaskQueue = tq
				}
				run, err := c.CreateAsync(cmd.Context, NewCreateOptions().WithStartWorkflowOptions(opts))
				if err != nil {
					return fmt.Errorf("error starting %s workflow: %w", CreateWorkflowName, err)
				}
				if cmd.Bool("detach") {
					fmt.Println("success")
					fmt.Printf("workflow id: %s\n", run.ID())
					fmt.Printf("run id: %s\n", run.RunID())
					return nil
				}
				if err := run.Get(cmd.Context); err != nil {
					return err
				} else {
					return nil
				}
			},
		},
	}
	if opts.worker != nil {
		commands = append(commands, []*v2.Command{
			{
				Name:                   "worker",
				Usage:                  "runs a temporal.Sample worker process",
				UseShortOptionHandling: true,
				Before:                 opts.before,
				After:                  opts.after,
				Action: func(cmd *v2.Context) error {
					c, err := opts.clientForCommand(cmd)
					if err != nil {
						return fmt.Errorf("error initializing client for command: %w", err)
					}
					defer c.Close()
					w, err := opts.worker(cmd, c)
					if opts.worker != nil {
						if err != nil {
							return fmt.Errorf("error initializing worker: %w", err)
						}
					}
					if err := w.Start(); err != nil {
						return fmt.Errorf("error starting worker: %w", err)
					}
					defer w.Stop()
					<-cmd.Context.Done()
					return nil
				},
			},
		}...)
	}
	sort.Slice(commands, func(i, j int) bool {
		return commands[i].Name < commands[j].Name
	})
	return commands, nil
}
