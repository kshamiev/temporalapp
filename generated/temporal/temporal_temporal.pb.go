// Code generated by protoc-gen-go_temporal. DO NOT EDIT.
// versions:
//
//	protoc-gen-go_temporal dev (latest)
//	go go1.22.2
//	protoc major:4  minor:25  patch:1  suffix:""
//
// source: temporal.proto
package temporal

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	expression "github.com/cludden/protoc-gen-go-temporal/pkg/expression"
	helpers "github.com/cludden/protoc-gen-go-temporal/pkg/helpers"
	testutil "github.com/cludden/protoc-gen-go-temporal/pkg/testutil"
	gohomedir "github.com/mitchellh/go-homedir"
	v2 "github.com/urfave/cli/v2"
	enumsv1 "go.temporal.io/api/enums/v1"
	serviceerror "go.temporal.io/api/serviceerror"
	client "go.temporal.io/sdk/client"
	temporal "go.temporal.io/sdk/temporal"
	testsuite "go.temporal.io/sdk/testsuite"
	worker "go.temporal.io/sdk/worker"
	workflow "go.temporal.io/sdk/workflow"
	protojson "google.golang.org/protobuf/encoding/protojson"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	"log/slog"
	"os"
	"sort"
	"strings"
	"time"
)

// CustomerTaskQueue is the default task-queue for a temporal.Customer worker
const CustomerTaskQueue = "root-v1"

// temporal.Customer workflow names
const (
	CreateWorkflowName = "temporal.Customer.Create"
)

// temporal.Customer workflow id expressions
var (
	CreateIdexpression = expression.MustParseExpression("customers/${! customerId.or(id.or(uuid_v4())) }")
)

// temporal.Customer query names
const (
	ReadQueryName = "temporal.Customer.Read"
)

// temporal.Customer signal names
const (
	DeleteSignalName = "temporal.Customer.Delete"
)

// temporal.Customer update names
const (
	UpdateUpdateName = "temporal.Customer.Update"
)

// CustomerClient describes a client for a(n) temporal.Customer worker
type CustomerClient interface {
	// Это основной workflow, представляющий жизненный цикл пользователя
	Create(ctx context.Context, req *CreateRequest, opts ...*CreateOptions) error

	// CreateAsync starts a(n) temporal.Customer.Create workflow and returns a handle to the workflow run
	CreateAsync(ctx context.Context, req *CreateRequest, opts ...*CreateOptions) (CreateRun, error)

	// GetCreate retrieves a handle to an existing temporal.Customer.Create workflow execution
	GetCreate(ctx context.Context, workflowID string, runID string) CreateRun

	// CancelWorkflow requests cancellation of an existing workflow execution
	CancelWorkflow(ctx context.Context, workflowID string, runID string) error

	// TerminateWorkflow an existing workflow execution
	TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error

	// Получение профиля из запущенного workflow
	// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers
	Read(ctx context.Context, workflowID string, runID string) (*Profile, error)

	// Удаление профиля. На самом деле это сигнал, который будет останавливать workflow с признаком отменен.
	// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-signal-handlers
	Delete(ctx context.Context, workflowID string, runID string) error

	// Обновление профиля в запущенном workflow
	// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers
	Update(ctx context.Context, workflowID string, runID string, req *UpdateRequest, opts ...*UpdateOptions) (*Profile, error)

	// UpdateAsync starts a(n) temporal.Customer.Update update and returns a handle to the workflow update
	UpdateAsync(ctx context.Context, workflowID string, runID string, req *UpdateRequest, opts ...*UpdateOptions) (UpdateHandle, error)

	// GetUpdate retrieves a handle to an existing temporal.Customer.Update update
	GetUpdate(ctx context.Context, req client.GetWorkflowUpdateHandleOptions) (UpdateHandle, error)
}

// customerClient implements a temporal client for a temporal.Customer service
type customerClient struct {
	client client.Client
	log    *slog.Logger
}

// NewCustomerClient initializes a new temporal.Customer client
func NewCustomerClient(c client.Client, options ...*customerClientOptions) CustomerClient {
	var cfg *customerClientOptions
	if len(options) > 0 {
		cfg = options[0]
	} else {
		cfg = NewCustomerClientOptions()
	}
	return &customerClient{
		client: c,
		log:    cfg.getLogger(),
	}
}

// NewCustomerClientWithOptions initializes a new Customer client with the given options
func NewCustomerClientWithOptions(c client.Client, opts client.Options, options ...*customerClientOptions) (CustomerClient, error) {
	var err error
	c, err = client.NewClientFromExisting(c, opts)
	if err != nil {
		return nil, fmt.Errorf("error initializing client with options: %w", err)
	}
	var cfg *customerClientOptions
	if len(options) > 0 {
		cfg = options[0]
	} else {
		cfg = NewCustomerClientOptions()
	}
	return &customerClient{
		client: c,
		log:    cfg.getLogger(),
	}, nil
}

// customerClientOptions describes optional runtime configuration for a CustomerClient
type customerClientOptions struct {
	log *slog.Logger
}

// NewCustomerClientOptions initializes a new customerClientOptions value
func NewCustomerClientOptions() *customerClientOptions {
	return &customerClientOptions{}
}

// WithLogger can be used to override the default logger
func (opts *customerClientOptions) WithLogger(l *slog.Logger) *customerClientOptions {
	if l != nil {
		opts.log = l
	}
	return opts
}

// getLogger returns the configured logger, or the default logger
func (opts *customerClientOptions) getLogger() *slog.Logger {
	if opts != nil && opts.log != nil {
		return opts.log
	}
	return slog.Default()
}

// Это основной workflow, представляющий жизненный цикл пользователя
func (c *customerClient) Create(ctx context.Context, req *CreateRequest, options ...*CreateOptions) error {
	run, err := c.CreateAsync(ctx, req, options...)
	if err != nil {
		return err
	}
	return run.Get(ctx)
}

// Это основной workflow, представляющий жизненный цикл пользователя
func (c *customerClient) CreateAsync(ctx context.Context, req *CreateRequest, options ...*CreateOptions) (CreateRun, error) {
	var o *CreateOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewCreateOptions()
	}
	opts, err := o.Build(req.ProtoReflect())
	if err != nil {
		return nil, fmt.Errorf("error initializing client.StartWorkflowOptions: %w", err)
	}
	run, err := c.client.ExecuteWorkflow(ctx, opts, CreateWorkflowName, req)
	if err != nil {
		return nil, err
	}
	if run == nil {
		return nil, errors.New("execute workflow returned nil run")
	}
	return &createRun{
		client: c,
		run:    run,
	}, nil
}

// GetCreate fetches an existing temporal.Customer.Create execution
func (c *customerClient) GetCreate(ctx context.Context, workflowID string, runID string) CreateRun {
	return &createRun{
		client: c,
		run:    c.client.GetWorkflow(ctx, workflowID, runID),
	}
}

// CancelWorkflow requests cancellation of an existing workflow execution
func (c *customerClient) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	return c.client.CancelWorkflow(ctx, workflowID, runID)
}

// TerminateWorkflow terminates an existing workflow execution
func (c *customerClient) TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error {
	return c.client.TerminateWorkflow(ctx, workflowID, runID, reason, details...)
}

// Получение профиля из запущенного workflow
// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers
func (c *customerClient) Read(ctx context.Context, workflowID string, runID string) (*Profile, error) {
	var resp Profile
	if val, err := c.client.QueryWorkflow(ctx, workflowID, runID, ReadQueryName); err != nil {
		return nil, err
	} else if err = val.Get(&resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Удаление профиля. На самом деле это сигнал, который будет останавливать workflow с признаком отменен.
// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-signal-handlers
func (c *customerClient) Delete(ctx context.Context, workflowID string, runID string) error {
	return c.client.SignalWorkflow(ctx, workflowID, runID, DeleteSignalName, nil)
}

// Обновление профиля в запущенном workflow
// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers
func (c *customerClient) Update(ctx context.Context, workflowID string, runID string, req *UpdateRequest, opts ...*UpdateOptions) (*Profile, error) {
	// initialize update options
	o := NewUpdateOptions()
	if len(opts) > 0 && opts[0].Options != nil {
		o = opts[0]
	}

	// call sync update with WorkflowUpdateStageCompleted wait policy
	handle, err := c.UpdateAsync(ctx, workflowID, runID, req, o.WithWaitPolicy(client.WorkflowUpdateStageCompleted))
	if err != nil {
		return nil, err
	}

	// block on update completion
	return handle.Get(ctx)
}

// Обновление профиля в запущенном workflow
// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers
func (c *customerClient) UpdateAsync(ctx context.Context, workflowID string, runID string, req *UpdateRequest, opts ...*UpdateOptions) (UpdateHandle, error) {
	// initialize update options
	var o *UpdateOptions
	if len(opts) > 0 && opts[0] != nil {
		o = opts[0]
	} else {
		o = NewUpdateOptions()
	}

	// build UpdateWorkflowOptions
	options, err := o.Build(workflowID, runID, req)
	if err != nil {
		return nil, fmt.Errorf("error initializing UpdateWorkflowWithOptions: %w", err)
	}

	// update workflow
	handle, err := c.client.UpdateWorkflow(ctx, *options)
	if err != nil {
		return nil, err
	}
	return &updateHandle{client: c, handle: handle}, nil
}

// GetUpdate retrieves a handle to an existing temporal.Customer.Update update
func (c *customerClient) GetUpdate(ctx context.Context, req client.GetWorkflowUpdateHandleOptions) (UpdateHandle, error) {
	return &updateHandle{
		client: c,
		handle: c.client.GetWorkflowUpdateHandle(req),
	}, nil
}

// CreateOptions provides configuration for a temporal.Customer.Create workflow operation
type CreateOptions struct {
	options          client.StartWorkflowOptions
	executionTimeout *time.Duration
	id               *string
	idReusePolicy    enumsv1.WorkflowIdReusePolicy
	retryPolicy      *temporal.RetryPolicy
	runTimeout       *time.Duration
	searchAttributes map[string]any
	taskQueue        *string
	taskTimeout      *time.Duration
}

// NewCreateOptions initializes a new CreateOptions value
func NewCreateOptions() *CreateOptions {
	return &CreateOptions{}
}

// Build initializes a new go.temporal.io/sdk/client.StartWorkflowOptions value with defaults and overrides applied
func (o *CreateOptions) Build(req protoreflect.Message) (client.StartWorkflowOptions, error) {
	opts := o.options
	if v := o.id; v != nil {
		opts.ID = *v
	} else if opts.ID == "" {
		id, err := expression.EvalExpression(CreateIdexpression, req)
		if err != nil {
			return opts, fmt.Errorf("error evaluating id expression for %q workflow: %w", CreateWorkflowName, err)
		}
		opts.ID = id
	}
	if v := o.idReusePolicy; v != enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = v
	} else if opts.WorkflowIDReusePolicy == enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = enumsv1.WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = CustomerTaskQueue
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.searchAttributes; v != nil {
		opts.SearchAttributes = o.searchAttributes
	}
	if v := o.executionTimeout; v != nil {
		opts.WorkflowExecutionTimeout = *v
	}
	if v := o.runTimeout; v != nil {
		opts.WorkflowRunTimeout = *v
	}
	if v := o.taskTimeout; v != nil {
		opts.WorkflowTaskTimeout = *v
	}
	return opts, nil
}

// WithStartWorkflowOptions sets the initial go.temporal.io/sdk/client.StartWorkflowOptions
func (o *CreateOptions) WithStartWorkflowOptions(options client.StartWorkflowOptions) *CreateOptions {
	o.options = options
	return o
}

// WithExecutionTimeout sets the WorkflowExecutionTimeout value
func (o *CreateOptions) WithExecutionTimeout(d time.Duration) *CreateOptions {
	o.executionTimeout = &d
	return o
}

// WithID sets the ID value
func (o *CreateOptions) WithID(id string) *CreateOptions {
	o.id = &id
	return o
}

// WithIDReusePolicy sets the WorkflowIDReusePolicy value
func (o *CreateOptions) WithIDReusePolicy(policy enumsv1.WorkflowIdReusePolicy) *CreateOptions {
	o.idReusePolicy = policy
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *CreateOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *CreateOptions {
	o.retryPolicy = policy
	return o
}

// WithRunTimeout sets the WorkflowRunTimeout value
func (o *CreateOptions) WithRunTimeout(d time.Duration) *CreateOptions {
	o.runTimeout = &d
	return o
}

// WithSearchAttributes sets the SearchAttributes value
func (o *CreateOptions) WithSearchAttributes(sa map[string]any) *CreateOptions {
	o.searchAttributes = sa
	return o
}

// WithTaskTimeout sets the WorkflowTaskTimeout value
func (o *CreateOptions) WithTaskTimeout(d time.Duration) *CreateOptions {
	o.taskTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *CreateOptions) WithTaskQueue(tq string) *CreateOptions {
	o.taskQueue = &tq
	return o
}

// CreateRun describes a(n) temporal.Customer.Create workflow run
type CreateRun interface {
	// ID returns the workflow ID
	ID() string

	// RunID returns the workflow instance ID
	RunID() string

	// Run returns the inner client.WorkflowRun
	Run() client.WorkflowRun

	// Get blocks until the workflow is complete and returns the result
	Get(ctx context.Context) error

	// Cancel requests cancellation of a workflow in execution, returning an error if applicable
	Cancel(ctx context.Context) error

	// Terminate terminates a workflow in execution, returning an error if applicable
	Terminate(ctx context.Context, reason string, details ...interface{}) error

	// Получение профиля из запущенного workflow
	// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers
	Read(ctx context.Context) (*Profile, error)

	// Удаление профиля. На самом деле это сигнал, который будет останавливать workflow с признаком отменен.
	// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-signal-handlers
	Delete(ctx context.Context) error

	// Обновление профиля в запущенном workflow
	// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers
	Update(ctx context.Context, req *UpdateRequest, opts ...*UpdateOptions) (*Profile, error)

	// Обновление профиля в запущенном workflow
	// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers
	UpdateAsync(ctx context.Context, req *UpdateRequest, opts ...*UpdateOptions) (UpdateHandle, error)
}

// createRun provides an internal implementation of a(n) CreateRunRun
type createRun struct {
	client *customerClient
	run    client.WorkflowRun
}

// ID returns the workflow ID
func (r *createRun) ID() string {
	return r.run.GetID()
}

// Run returns the inner client.WorkflowRun
func (r *createRun) Run() client.WorkflowRun {
	return r.run
}

// RunID returns the execution ID
func (r *createRun) RunID() string {
	return r.run.GetRunID()
}

// Cancel requests cancellation of a workflow in execution, returning an error if applicable
func (r *createRun) Cancel(ctx context.Context) error {
	return r.client.CancelWorkflow(ctx, r.ID(), r.RunID())
}

// Get blocks until the workflow is complete, returning the result if applicable
func (r *createRun) Get(ctx context.Context) error {
	return r.run.Get(ctx, nil)
}

// Terminate terminates a workflow in execution, returning an error if applicable
func (r *createRun) Terminate(ctx context.Context, reason string, details ...interface{}) error {
	return r.client.TerminateWorkflow(ctx, r.ID(), r.RunID(), reason, details...)
}

// Получение профиля из запущенного workflow
// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers
func (r *createRun) Read(ctx context.Context) (*Profile, error) {
	return r.client.Read(ctx, r.ID(), "")
}

// Удаление профиля. На самом деле это сигнал, который будет останавливать workflow с признаком отменен.
// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-signal-handlers
func (r *createRun) Delete(ctx context.Context) error {
	return r.client.Delete(ctx, r.ID(), "")
}

// Обновление профиля в запущенном workflow
// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers
func (r *createRun) Update(ctx context.Context, req *UpdateRequest, opts ...*UpdateOptions) (*Profile, error) {
	return r.client.Update(ctx, r.ID(), r.RunID(), req, opts...)
}

// Обновление профиля в запущенном workflow
// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers
func (r *createRun) UpdateAsync(ctx context.Context, req *UpdateRequest, opts ...*UpdateOptions) (UpdateHandle, error) {
	return r.client.UpdateAsync(ctx, r.ID(), r.RunID(), req, opts...)
}

// UpdateHandle describes a(n) temporal.Customer.Update update handle
type UpdateHandle interface {
	// WorkflowID returns the workflow ID
	WorkflowID() string
	// RunID returns the workflow instance ID
	RunID() string
	// UpdateID returns the update ID
	UpdateID() string
	// Get blocks until the workflow is complete and returns the result
	Get(ctx context.Context) (*Profile, error)
}

// updateHandle provides an internal implementation of a(n) UpdateHandle
type updateHandle struct {
	client *customerClient
	handle client.WorkflowUpdateHandle
}

// WorkflowID returns the workflow ID
func (h *updateHandle) WorkflowID() string {
	return h.handle.WorkflowID()
}

// RunID returns the execution ID
func (h *updateHandle) RunID() string {
	return h.handle.RunID()
}

// UpdateID returns the update ID
func (h *updateHandle) UpdateID() string {
	return h.handle.UpdateID()
}

// Get blocks until the update wait policy is met, returning the result if applicable
func (h *updateHandle) Get(ctx context.Context) (*Profile, error) {
	var resp Profile
	var err error
	doneCh := make(chan struct{})
	gctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	go func() {
		for {
			var deadlineExceeded *serviceerror.DeadlineExceeded
			if err = h.handle.Get(gctx, &resp); err != nil && ctx.Err() == nil && (errors.As(err, &deadlineExceeded) || strings.Contains(err.Error(), context.DeadlineExceeded.Error())) {
				continue
			}
			break
		}
		close(doneCh)
	}()

	select {
	case <-ctx.Done():
		return nil, ctx.Err()
	case <-doneCh:
		if err != nil {
			return nil, err
		}
		return &resp, nil
	}
}

// UpdateOptions provides configuration for a temporal.Customer.Update update operation
type UpdateOptions struct {
	Options    *client.UpdateWorkflowOptions
	id         *string
	waitPolicy client.WorkflowUpdateStage
}

// NewUpdateOptions initializes a new UpdateOptions value
func NewUpdateOptions() *UpdateOptions {
	return &UpdateOptions{Options: &client.UpdateWorkflowOptions{}}
}

// Build initializes a new client.UpdateWorkflowOptions with defaults and overrides applied
func (o *UpdateOptions) Build(workflowID string, runID string, req *UpdateRequest) (opts *client.UpdateWorkflowOptions, err error) {
	// use user-provided UpdateWorkflowOptions if exists
	if o.Options != nil {
		opts = o.Options
	} else {
		opts = &client.UpdateWorkflowOptions{}
	}

	// set constants
	opts.Args = []any{req}
	opts.RunID = runID
	opts.UpdateName = UpdateUpdateName
	opts.WorkflowID = workflowID

	// set UpdateID
	if v := o.id; v != nil {
		opts.UpdateID = *v
	}

	// set WaitPolicy
	if v := o.waitPolicy; v != client.WorkflowUpdateStageUnspecified {
		opts.WaitForStage = v
	} else if opts.WaitForStage == client.WorkflowUpdateStageUnspecified {
		opts.WaitForStage = client.WorkflowUpdateStageCompleted
	}
	return opts, nil
}

// WithUpdateID sets the UpdateID
func (o *UpdateOptions) WithUpdateID(id string) *UpdateOptions {
	o.id = &id
	return o
}

// WithUpdateWorkflowOptions sets the initial client.UpdateWorkflowOptions
func (o *UpdateOptions) WithUpdateWorkflowOptions(options client.UpdateWorkflowOptions) *UpdateOptions {
	o.Options = &options
	return o
}

// WithWaitPolicy sets the WaitPolicy
func (o *UpdateOptions) WithWaitPolicy(policy client.WorkflowUpdateStage) *UpdateOptions {
	o.waitPolicy = policy
	return o
}

// Reference to generated workflow functions
var (
	// Это основной workflow, представляющий жизненный цикл пользователя
	CreateFunction func(workflow.Context, *CreateRequest) error
)

// CustomerWorkflowFunctions describes a mockable dependency for inlining workflows within other workflows
type (
	// CustomerWorkflowFunctions describes a mockable dependency for inlining workflows within other workflows
	CustomerWorkflowFunctions interface {
		// Это основной workflow, представляющий жизненный цикл пользователя
		Create(workflow.Context, *CreateRequest) error
	}
	// customerWorkflowFunctions provides an internal CustomerWorkflowFunctions implementation
	customerWorkflowFunctions struct{}
)

func NewCustomerWorkflowFunctions() CustomerWorkflowFunctions {
	return &customerWorkflowFunctions{}
}

// Это основной workflow, представляющий жизненный цикл пользователя
func (f *customerWorkflowFunctions) Create(ctx workflow.Context, req *CreateRequest) error {
	if CreateFunction == nil {
		return errors.New("Create requires workflow registration via RegisterCustomerWorkflows or RegisterCreateWorkflow")
	}
	return CreateFunction(ctx, req)
}

// CustomerWorkflows provides methods for initializing new temporal.Customer workflow values
type CustomerWorkflows interface {
	// Это основной workflow, представляющий жизненный цикл пользователя
	Create(ctx workflow.Context, input *CreateWorkflowInput) (CreateWorkflow, error)
}

// RegisterCustomerWorkflows registers temporal.Customer workflows with the given worker
func RegisterCustomerWorkflows(r worker.WorkflowRegistry, workflows CustomerWorkflows) {
	RegisterCreateWorkflow(r, workflows.Create)
}

// RegisterCreateWorkflow registers a temporal.Customer.Create workflow with the given worker
func RegisterCreateWorkflow(r worker.WorkflowRegistry, wf func(workflow.Context, *CreateWorkflowInput) (CreateWorkflow, error)) {
	CreateFunction = buildCreate(wf)
	r.RegisterWorkflowWithOptions(CreateFunction, workflow.RegisterOptions{Name: CreateWorkflowName})
}

// buildCreate converts a Create workflow struct into a valid workflow function
func buildCreate(ctor func(workflow.Context, *CreateWorkflowInput) (CreateWorkflow, error)) func(workflow.Context, *CreateRequest) error {
	return func(ctx workflow.Context, req *CreateRequest) error {
		input := &CreateWorkflowInput{
			Req: req,
			Delete: &DeleteSignal{
				Channel: workflow.GetSignalChannel(ctx, DeleteSignalName),
			},
		}
		wf, err := ctor(ctx, input)
		if err != nil {
			return err
		}
		if initializable, ok := wf.(helpers.Initializable); ok {
			if err := initializable.Initialize(ctx); err != nil {
				return err
			}
		}
		if err := workflow.SetQueryHandler(ctx, ReadQueryName, wf.Read); err != nil {
			return err
		}
		{
			opts := workflow.UpdateHandlerOptions{}
			if err := workflow.SetUpdateHandlerWithOptions(ctx, UpdateUpdateName, wf.Update, opts); err != nil {
				return err
			}
		}
		return wf.Execute(ctx)
	}
}

// CreateWorkflowInput describes the input to a(n) temporal.Customer.Create workflow constructor
type CreateWorkflowInput struct {
	Req    *CreateRequest
	Delete *DeleteSignal
}

// Это основной workflow, представляющий жизненный цикл пользователя
//
// workflow details: (name: "temporal.Customer.Create", id: "customers/${! customerId.or(id.or(uuid_v4())) }")
type CreateWorkflow interface {
	// Execute defines the entrypoint to a(n) temporal.Customer.Create workflow
	Execute(ctx workflow.Context) error

	// Получение профиля из запущенного workflow
	// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers
	Read() (*Profile, error)

	// Обновление профиля в запущенном workflow
	// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers
	Update(workflow.Context, *UpdateRequest) (*Profile, error)
}

// Это основной workflow, представляющий жизненный цикл пользователя
func CreateChild(ctx workflow.Context, req *CreateRequest, options ...*CreateChildOptions) error {
	childRun, err := CreateChildAsync(ctx, req, options...)
	if err != nil {
		return err
	}
	return childRun.Get(ctx)
}

// Это основной workflow, представляющий жизненный цикл пользователя
func CreateChildAsync(ctx workflow.Context, req *CreateRequest, options ...*CreateChildOptions) (*CreateChildRun, error) {
	var o *CreateChildOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewCreateChildOptions()
	}
	opts, err := o.Build(ctx, req.ProtoReflect())
	if err != nil {
		return nil, fmt.Errorf("error initializing workflow.ChildWorkflowOptions: %w", err)
	}
	ctx = workflow.WithChildOptions(ctx, opts)
	return &CreateChildRun{Future: workflow.ExecuteChildWorkflow(ctx, CreateWorkflowName, req)}, nil
}

// CreateChildOptions provides configuration for a child temporal.Customer.Create workflow operation
type CreateChildOptions struct {
	options             workflow.ChildWorkflowOptions
	executionTimeout    *time.Duration
	id                  *string
	idReusePolicy       enumsv1.WorkflowIdReusePolicy
	retryPolicy         *temporal.RetryPolicy
	runTimeout          *time.Duration
	searchAttributes    map[string]any
	taskQueue           *string
	taskTimeout         *time.Duration
	parentClosePolicy   enumsv1.ParentClosePolicy
	waitForCancellation *bool
}

// NewCreateChildOptions initializes a new CreateChildOptions value
func NewCreateChildOptions() *CreateChildOptions {
	return &CreateChildOptions{}
}

// Build initializes a new go.temporal.io/sdk/workflow.ChildWorkflowOptions value with defaults and overrides applied
func (o *CreateChildOptions) Build(ctx workflow.Context, req protoreflect.Message) (workflow.ChildWorkflowOptions, error) {
	opts := o.options
	if v := o.id; v != nil {
		opts.WorkflowID = *v
	} else if opts.WorkflowID == "" {
		// wrap expression evaluation in local activity
		// more info: https://cludden.github.io/protoc-gen-go-temporal/docs/guides/patches#pv_64-expression-evaluation-local-activity
		if workflow.GetVersion(ctx, "cludden_protoc-gen-go-temporal_64_expression-evaluation-local-activity", workflow.DefaultVersion, 1) == 1 {
			lao := workflow.GetLocalActivityOptions(ctx)
			lao.ScheduleToCloseTimeout = time.Second * 10
			if err := workflow.ExecuteLocalActivity(workflow.WithLocalActivityOptions(ctx, lao), func(ctx context.Context) (string, error) {
				id, err := expression.EvalExpression(CreateIdexpression, req)
				if err != nil {
					return "", fmt.Errorf("error evaluating id expression for %q workflow: %w", CreateWorkflowName, err)
				}
				return id, nil
			}).Get(ctx, &opts.WorkflowID); err != nil {
				return opts, fmt.Errorf("error evaluating id expression for %q workflow: %w", CreateWorkflowName, err)
			}
		} else {
			id, err := expression.EvalExpression(CreateIdexpression, req)
			if err != nil {
				return opts, fmt.Errorf("error evaluating id expression for %q workflow: %w", CreateWorkflowName, err)
			}
			opts.WorkflowID = id
		}
	}
	if v := o.idReusePolicy; v != enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = v
	} else if opts.WorkflowIDReusePolicy == enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = enumsv1.WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = CustomerTaskQueue
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.searchAttributes; v != nil {
		opts.SearchAttributes = o.searchAttributes
	}
	if v := o.executionTimeout; v != nil {
		opts.WorkflowExecutionTimeout = *v
	}
	if v := o.runTimeout; v != nil {
		opts.WorkflowRunTimeout = *v
	}
	if v := o.taskTimeout; v != nil {
		opts.WorkflowTaskTimeout = *v
	}
	if v := o.parentClosePolicy; v != enumsv1.PARENT_CLOSE_POLICY_UNSPECIFIED {
		opts.ParentClosePolicy = v
	}
	if v := o.waitForCancellation; v != nil {
		opts.WaitForCancellation = *v
	}
	return opts, nil
}

// WithChildWorkflowOptions sets the initial go.temporal.io/sdk/workflow.ChildWorkflowOptions
func (o *CreateChildOptions) WithChildWorkflowOptions(options workflow.ChildWorkflowOptions) *CreateChildOptions {
	o.options = options
	return o
}

// WithExecutionTimeout sets the WorkflowExecutionTimeout value
func (o *CreateChildOptions) WithExecutionTimeout(d time.Duration) *CreateChildOptions {
	o.executionTimeout = &d
	return o
}

// WithID sets the WorkflowID value
func (o *CreateChildOptions) WithID(id string) *CreateChildOptions {
	o.id = &id
	return o
}

// WithIDReusePolicy sets the WorkflowIDReusePolicy value
func (o *CreateChildOptions) WithIDReusePolicy(policy enumsv1.WorkflowIdReusePolicy) *CreateChildOptions {
	o.idReusePolicy = policy
	return o
}

// WithParentClosePolicy sets the WorkflowIDReusePolicy value
func (o *CreateChildOptions) WithParentClosePolicy(policy enumsv1.ParentClosePolicy) *CreateChildOptions {
	o.parentClosePolicy = policy
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *CreateChildOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *CreateChildOptions {
	o.retryPolicy = policy
	return o
}

// WithRunTimeout sets the WorkflowRunTimeout value
func (o *CreateChildOptions) WithRunTimeout(d time.Duration) *CreateChildOptions {
	o.runTimeout = &d
	return o
}

// WithSearchAttributes sets the SearchAttributes value
func (o *CreateChildOptions) WithSearchAttributes(sa map[string]any) *CreateChildOptions {
	o.searchAttributes = sa
	return o
}

// WithTaskTimeout sets the WorkflowTaskTimeout value
func (o *CreateChildOptions) WithTaskTimeout(d time.Duration) *CreateChildOptions {
	o.taskTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *CreateChildOptions) WithTaskQueue(tq string) *CreateChildOptions {
	o.taskQueue = &tq
	return o
}

// WithWaitForCancellation sets the WaitForCancellation value
func (o *CreateChildOptions) WithWaitForCancellation(wait bool) *CreateChildOptions {
	o.waitForCancellation = &wait
	return o
}

// CreateChildRun describes a child Create workflow run
type CreateChildRun struct {
	Future workflow.ChildWorkflowFuture
}

// Get blocks until the workflow is completed, returning the response value
func (r *CreateChildRun) Get(ctx workflow.Context) error {
	if err := r.Future.Get(ctx, nil); err != nil {
		return err
	}
	return nil
}

// Select adds this completion to the selector. Callback can be nil.
func (r *CreateChildRun) Select(sel workflow.Selector, fn func(*CreateChildRun)) workflow.Selector {
	return sel.AddFuture(r.Future, func(workflow.Future) {
		if fn != nil {
			fn(r)
		}
	})
}

// SelectStart adds waiting for start to the selector. Callback can be nil.
func (r *CreateChildRun) SelectStart(sel workflow.Selector, fn func(*CreateChildRun)) workflow.Selector {
	return sel.AddFuture(r.Future.GetChildWorkflowExecution(), func(workflow.Future) {
		if fn != nil {
			fn(r)
		}
	})
}

// WaitStart waits for the child workflow to start
func (r *CreateChildRun) WaitStart(ctx workflow.Context) (*workflow.Execution, error) {
	var exec workflow.Execution
	if err := r.Future.GetChildWorkflowExecution().Get(ctx, &exec); err != nil {
		return nil, err
	}
	return &exec, nil
}

// Delete sends a(n) "temporal.Customer.Delete" signal request to the child workflow
func (r *CreateChildRun) Delete(ctx workflow.Context) error {
	return r.DeleteAsync(ctx).Get(ctx, nil)
}

// DeleteAsync sends a(n) "temporal.Customer.Delete" signal request to the child workflow
func (r *CreateChildRun) DeleteAsync(ctx workflow.Context) workflow.Future {
	return r.Future.SignalChildWorkflow(ctx, DeleteSignalName, nil)
}

// DeleteSignal describes a(n) temporal.Customer.Delete signal
type DeleteSignal struct {
	Channel workflow.ReceiveChannel
}

// NewDeleteSignal initializes a new temporal.Customer.Delete signal wrapper
func NewDeleteSignal(ctx workflow.Context) *DeleteSignal {
	return &DeleteSignal{Channel: workflow.GetSignalChannel(ctx, DeleteSignalName)}
}

// Receive blocks until a(n) temporal.Customer.Delete signal is received
func (s *DeleteSignal) Receive(ctx workflow.Context) bool {
	more := s.Channel.Receive(ctx, nil)
	return more
}

// ReceiveAsync checks for a temporal.Customer.Delete signal without blocking
func (s *DeleteSignal) ReceiveAsync() bool {
	return s.Channel.ReceiveAsync(nil)
}

// ReceiveWithTimeout blocks until a(n) temporal.Customer.Delete signal is received or timeout expires.
// Returns more value of false when Channel is closed.
// Returns ok value of false when no value was found in the channel for the duration of timeout or the ctx was canceled.
func (s *DeleteSignal) ReceiveWithTimeout(ctx workflow.Context, timeout time.Duration) (ok bool, more bool) {
	if ok, more = s.Channel.ReceiveWithTimeout(ctx, timeout, nil); !ok {
		return false, more
	}
	return
}

// Select checks for a(n) temporal.Customer.Delete signal without blocking
func (s *DeleteSignal) Select(sel workflow.Selector, fn func()) workflow.Selector {
	return sel.AddReceive(s.Channel, func(workflow.ReceiveChannel, bool) {
		s.ReceiveAsync()
		if fn != nil {
			fn()
		}
	})
}

// Удаление профиля. На самом деле это сигнал, который будет останавливать workflow с признаком отменен.
// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-signal-handlers
func DeleteExternal(ctx workflow.Context, workflowID string, runID string) error {
	return DeleteExternalAsync(ctx, workflowID, runID).Get(ctx, nil)
}

// Удаление профиля. На самом деле это сигнал, который будет останавливать workflow с признаком отменен.
// https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-signal-handlers
func DeleteExternalAsync(ctx workflow.Context, workflowID string, runID string) workflow.Future {
	return workflow.SignalExternalWorkflow(ctx, workflowID, runID, DeleteSignalName, nil)
}

// CustomerActivities describes available worker activities
type CustomerActivities interface{}

// RegisterCustomerActivities registers activities with a worker
func RegisterCustomerActivities(r worker.ActivityRegistry, activities CustomerActivities) {}

// TestClient provides a testsuite-compatible Client
type TestCustomerClient struct {
	env       *testsuite.TestWorkflowEnvironment
	workflows CustomerWorkflows
}

var _ CustomerClient = &TestCustomerClient{}

// NewTestCustomerClient initializes a new TestCustomerClient value
func NewTestCustomerClient(env *testsuite.TestWorkflowEnvironment, workflows CustomerWorkflows, activities CustomerActivities) *TestCustomerClient {
	if workflows != nil {
		RegisterCustomerWorkflows(env, workflows)
	}
	if activities != nil {
		RegisterCustomerActivities(env, activities)
	}
	return &TestCustomerClient{env, workflows}
}

// Create executes a(n) temporal.Customer.Create workflow in the test environment
func (c *TestCustomerClient) Create(ctx context.Context, req *CreateRequest, opts ...*CreateOptions) error {
	run, err := c.CreateAsync(ctx, req, opts...)
	if err != nil {
		return err
	}
	return run.Get(ctx)
}

// CreateAsync executes a(n) temporal.Customer.Create workflow in the test environment
func (c *TestCustomerClient) CreateAsync(ctx context.Context, req *CreateRequest, options ...*CreateOptions) (CreateRun, error) {
	var o *CreateOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewCreateOptions()
	}
	opts, err := o.Build(req.ProtoReflect())
	if err != nil {
		return nil, fmt.Errorf("error initializing client.StartWorkflowOptions: %w", err)
	}
	return &testCreateRun{client: c, env: c.env, opts: &opts, req: req, workflows: c.workflows}, nil
}

// GetCreate is a noop
func (c *TestCustomerClient) GetCreate(ctx context.Context, workflowID string, runID string) CreateRun {
	return &testCreateRun{env: c.env, workflows: c.workflows}
}

// CancelWorkflow requests cancellation of an existing workflow execution
func (c *TestCustomerClient) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	c.env.CancelWorkflow()
	return nil
}

// TerminateWorkflow terminates an existing workflow execution
func (c *TestCustomerClient) TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error {
	return c.CancelWorkflow(ctx, workflowID, runID)
}

// Read executes a temporal.Customer.Read query
func (c *TestCustomerClient) Read(ctx context.Context, workflowID string, runID string) (*Profile, error) {
	val, err := c.env.QueryWorkflow(ReadQueryName)
	if err != nil {
		return nil, err
	} else if !val.HasValue() {
		return nil, nil
	} else {
		var result Profile
		if err := val.Get(&result); err != nil {
			return nil, err
		}
		return &result, nil
	}
}

// Delete executes a temporal.Customer.Delete signal
func (c *TestCustomerClient) Delete(ctx context.Context, workflowID string, runID string) error {
	c.env.SignalWorkflow(DeleteSignalName, nil)
	return nil
}

// Update executes a(n) temporal.Customer.Update update in the test environment
func (c *TestCustomerClient) Update(ctx context.Context, workflowID string, runID string, req *UpdateRequest, opts ...*UpdateOptions) (*Profile, error) {
	options := NewUpdateOptions()
	if len(opts) > 0 && opts[0].Options != nil {
		options = opts[0]
	}
	options.Options.WaitForStage = client.WorkflowUpdateStageCompleted
	handle, err := c.UpdateAsync(ctx, workflowID, runID, req, options)
	if err != nil {
		return nil, err
	}
	return handle.Get(ctx)
}

// UpdateAsync executes a(n) temporal.Customer.Update update in the test environment
func (c *TestCustomerClient) UpdateAsync(ctx context.Context, workflowID string, runID string, req *UpdateRequest, opts ...*UpdateOptions) (UpdateHandle, error) {
	var o *UpdateOptions
	if len(opts) > 0 && opts[0] != nil {
		o = opts[0]
	} else {
		o = NewUpdateOptions()
	}
	options, err := o.Build(workflowID, runID, req)
	if err != nil {
		return nil, fmt.Errorf("error initializing UpdateWorkflowWithOptions: %w", err)
	}

	if options.UpdateID == "" {
		options.UpdateID = workflowID
	}

	uc := testutil.NewUpdateCallbacks()
	c.env.UpdateWorkflow(UpdateUpdateName, options.UpdateID, uc, req)
	return &testUpdateHandle{
		callbacks:  uc,
		env:        c.env,
		opts:       options,
		runID:      runID,
		workflowID: workflowID,
		req:        req,
	}, nil
}

// GetUpdate retrieves a handle to an existing temporal.Customer.Update update
func (c *TestCustomerClient) GetUpdate(ctx context.Context, req client.GetWorkflowUpdateHandleOptions) (UpdateHandle, error) {
	return nil, errors.New("unimplemented")
}

var _ UpdateHandle = &testUpdateHandle{}

// testUpdateHandle provides an internal implementation of a(n) UpdateHandle
type testUpdateHandle struct {
	callbacks  *testutil.UpdateCallbacks
	env        *testsuite.TestWorkflowEnvironment
	opts       *client.UpdateWorkflowOptions
	req        *UpdateRequest
	runID      string
	workflowID string
}

// Get retrieves a test temporal.Customer.Update update result
func (h *testUpdateHandle) Get(ctx context.Context) (*Profile, error) {
	if resp, err := h.callbacks.Get(ctx); err != nil {
		return nil, err
	} else {
		return resp.(*Profile), nil
	}
}

// RunID implementation
func (h *testUpdateHandle) RunID() string {
	return h.runID
}

// UpdateID implementation
func (h *testUpdateHandle) UpdateID() string {
	if h.opts != nil {
		return h.opts.UpdateID
	}
	return ""
}

// WorkflowID implementation
func (h *testUpdateHandle) WorkflowID() string {
	return h.workflowID
}

var _ CreateRun = &testCreateRun{}

// testCreateRun provides convenience methods for interacting with a(n) temporal.Customer.Create workflow in the test environment
type testCreateRun struct {
	client    *TestCustomerClient
	env       *testsuite.TestWorkflowEnvironment
	opts      *client.StartWorkflowOptions
	req       *CreateRequest
	workflows CustomerWorkflows
}

// Cancel requests cancellation of a workflow in execution, returning an error if applicable
func (r *testCreateRun) Cancel(ctx context.Context) error {
	return r.client.CancelWorkflow(ctx, r.ID(), r.RunID())
}

// Get retrieves a test temporal.Customer.Create workflow result
func (r *testCreateRun) Get(context.Context) error {
	r.env.ExecuteWorkflow(CreateWorkflowName, r.req)
	if !r.env.IsWorkflowCompleted() {
		return errors.New("workflow in progress")
	}
	if err := r.env.GetWorkflowError(); err != nil {
		return err
	}
	return nil
}

// ID returns a test temporal.Customer.Create workflow run's workflow ID
func (r *testCreateRun) ID() string {
	if r.opts != nil {
		return r.opts.ID
	}
	return ""
}

// Run noop implementation
func (r *testCreateRun) Run() client.WorkflowRun {
	return nil
}

// RunID noop implementation
func (r *testCreateRun) RunID() string {
	return ""
}

// Terminate terminates a workflow in execution, returning an error if applicable
func (r *testCreateRun) Terminate(ctx context.Context, reason string, details ...interface{}) error {
	return r.client.TerminateWorkflow(ctx, r.ID(), r.RunID(), reason, details...)
}

// Read executes a temporal.Customer.Read query against a test temporal.Customer.Create workflow
func (r *testCreateRun) Read(ctx context.Context) (*Profile, error) {
	return r.client.Read(ctx, r.ID(), r.RunID())
}

// Delete executes a temporal.Customer.Delete signal against a test temporal.Customer.Create workflow
func (r *testCreateRun) Delete(ctx context.Context) error {
	return r.client.Delete(ctx, r.ID(), r.RunID())
}

// Update executes a(n) temporal.Customer.Update update against a test temporal.Customer.Create workflow
func (r *testCreateRun) Update(ctx context.Context, req *UpdateRequest, opts ...*UpdateOptions) (*Profile, error) {
	return r.client.Update(ctx, r.ID(), r.RunID(), req, opts...)
}

// UpdateAsync executes a(n) temporal.Customer.Update update against a test temporal.Customer.Create workflow
func (r *testCreateRun) UpdateAsync(ctx context.Context, req *UpdateRequest, opts ...*UpdateOptions) (UpdateHandle, error) {
	return r.client.UpdateAsync(ctx, r.ID(), r.RunID(), req, opts...)
}

// CustomerCliOptions describes runtime configuration for temporal.Customer cli
type CustomerCliOptions struct {
	after            func(*v2.Context) error
	before           func(*v2.Context) error
	clientForCommand func(*v2.Context) (client.Client, error)
	worker           func(*v2.Context, client.Client) (worker.Worker, error)
}

// NewCustomerCliOptions initializes a new CustomerCliOptions value
func NewCustomerCliOptions() *CustomerCliOptions {
	return &CustomerCliOptions{}
}

// WithAfter injects a custom After hook to be run after any command invocation
func (opts *CustomerCliOptions) WithAfter(fn func(*v2.Context) error) *CustomerCliOptions {
	opts.after = fn
	return opts
}

// WithBefore injects a custom Before hook to be run prior to any command invocation
func (opts *CustomerCliOptions) WithBefore(fn func(*v2.Context) error) *CustomerCliOptions {
	opts.before = fn
	return opts
}

// WithClient provides a Temporal client factory for use by commands
func (opts *CustomerCliOptions) WithClient(fn func(*v2.Context) (client.Client, error)) *CustomerCliOptions {
	opts.clientForCommand = fn
	return opts
}

// WithWorker provides an method for initializing a worker
func (opts *CustomerCliOptions) WithWorker(fn func(*v2.Context, client.Client) (worker.Worker, error)) *CustomerCliOptions {
	opts.worker = fn
	return opts
}

// NewCustomerCli initializes a cli for a(n) temporal.Customer service
func NewCustomerCli(options ...*CustomerCliOptions) (*v2.App, error) {
	commands, err := newCustomerCommands(options...)
	if err != nil {
		return nil, fmt.Errorf("error initializing subcommands: %w", err)
	}
	return &v2.App{
		Name:                      "customer",
		Commands:                  commands,
		DisableSliceFlagSeparator: true,
	}, nil
}

// NewCustomerCliCommand initializes a cli command for a temporal.Customer service with subcommands for each query, signal, update, and workflow
func NewCustomerCliCommand(options ...*CustomerCliOptions) (*v2.Command, error) {
	subcommands, err := newCustomerCommands(options...)
	if err != nil {
		return nil, fmt.Errorf("error initializing subcommands: %w", err)
	}
	return &v2.Command{
		Name:        "customer",
		Subcommands: subcommands,
	}, nil
}

// newCustomerCommands initializes (sub)commands for a temporal.Customer cli or command
func newCustomerCommands(options ...*CustomerCliOptions) ([]*v2.Command, error) {
	opts := &CustomerCliOptions{}
	if len(options) > 0 {
		opts = options[0]
	}
	if opts.clientForCommand == nil {
		opts.clientForCommand = func(*v2.Context) (client.Client, error) {
			return client.Dial(client.Options{})
		}
	}
	commands := []*v2.Command{
		{
			Name:                   "read",
			Usage:                  "Получение профиля из запущенного workflow https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers",
			Category:               "QUERIES",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.StringFlag{
					Name:     "workflow-id",
					Usage:    "workflow id",
					Required: true,
					Aliases:  []string{"w"},
				},
				&v2.StringFlag{
					Name:    "run-id",
					Usage:   "run id",
					Aliases: []string{"r"},
				},
			},
			Action: func(cmd *v2.Context) error {
				c, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer c.Close()
				client := NewCustomerClient(c)
				if resp, err := client.Read(cmd.Context, cmd.String("workflow-id"), cmd.String("run-id")); err != nil {
					return fmt.Errorf("error executing %q query: %w", ReadQueryName, err)
				} else {
					b, err := protojson.Marshal(resp)
					if err != nil {
						return fmt.Errorf("error serializing response json: %w", err)
					}
					var out bytes.Buffer
					if err := json.Indent(&out, b, "", "  "); err != nil {
						return fmt.Errorf("error formatting json: %w", err)
					}
					fmt.Println(out.String())
					return nil
				}
			},
		},
		{
			Name:                   "delete",
			Usage:                  "Удаление профиля. На самом деле это сигнал, который будет останавливать workflow с признаком отменен. https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-signal-handlers",
			Category:               "SIGNALS",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.StringFlag{
					Name:     "workflow-id",
					Usage:    "workflow id",
					Required: true,
					Aliases:  []string{"w"},
				},
				&v2.StringFlag{
					Name:    "run-id",
					Usage:   "run id",
					Aliases: []string{"r"},
				},
			},
			Action: func(cmd *v2.Context) error {
				c, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer c.Close()
				client := NewCustomerClient(c)
				if err := client.Delete(cmd.Context, cmd.String("workflow-id"), cmd.String("run-id")); err != nil {
					return fmt.Errorf("error sending %q signal: %w", DeleteSignalName, err)
				}
				fmt.Println("success")
				return nil
			},
		},
		{
			Name:                   "update",
			Usage:                  "Обновление профиля в запущенном workflow https://docs.temporal.io/encyclopedia/workflow-message-passing#writing-query-handlers",
			Category:               "UPDATES",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.BoolFlag{
					Name:    "detach",
					Usage:   "run workflow update in the background and print workflow, execution, and udpate id",
					Aliases: []string{"d"},
				},
				&v2.StringFlag{
					Name:     "workflow-id",
					Usage:    "workflow id",
					Required: true,
					Aliases:  []string{"w"},
				},
				&v2.StringFlag{
					Name:    "run-id",
					Usage:   "run id",
					Aliases: []string{"r"},
				},
				&v2.StringFlag{
					Name:    "input-file",
					Usage:   "path to json-formatted input file",
					Aliases: []string{"f"},
				},
				&v2.StringFlag{
					Name:     "name",
					Usage:    "set the value of the operation's \"Name\" parameter",
					Category: "INPUT",
				},
			},
			Action: func(cmd *v2.Context) error {
				c, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer c.Close()
				client := NewCustomerClient(c)
				req, err := UnmarshalCliFlagsToUpdateRequest(cmd)
				if err != nil {
					return fmt.Errorf("error unmarshalling request: %w", err)
				}
				handle, err := client.UpdateAsync(cmd.Context, cmd.String("workflow-id"), cmd.String("run-id"), req)
				if err != nil {
					return fmt.Errorf("error executing %s update: %w", UpdateUpdateName, err)
				}
				if cmd.Bool("detach") {
					fmt.Println("success")
					fmt.Printf("workflow id: %s\n", handle.WorkflowID())
					fmt.Printf("run id: %s\n", handle.RunID())
					fmt.Printf("update id: %s\n", handle.UpdateID())
					return nil
				}
				if resp, err := handle.Get(cmd.Context); err != nil {
					return err
				} else {
					b, err := protojson.Marshal(resp)
					if err != nil {
						return fmt.Errorf("error serializing response json: %w", err)
					}
					var out bytes.Buffer
					if err := json.Indent(&out, b, "", "  "); err != nil {
						return fmt.Errorf("error formatting json: %w", err)
					}
					fmt.Println(out.String())
					return nil
				}
			},
		},
		{
			Name:                   "create",
			Usage:                  "Это основной workflow, представляющий жизненный цикл пользователя",
			Category:               "WORKFLOWS",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.BoolFlag{
					Name:    "detach",
					Usage:   "run workflow in the background and print workflow and execution id",
					Aliases: []string{"d"},
				},
				&v2.StringFlag{
					Name:    "task-queue",
					Usage:   "task queue name",
					Aliases: []string{"t"},
					EnvVars: []string{"TEMPORAL_TASK_QUEUE_NAME", "TEMPORAL_TASK_QUEUE", "TASK_QUEUE_NAME", "TASK_QUEUE"},
					Value:   "root-v1",
				},
				&v2.StringFlag{
					Name:    "input-file",
					Usage:   "path to json-formatted input file",
					Aliases: []string{"f"},
				},
				&v2.StringFlag{
					Name:     "name",
					Usage:    "set the value of the operation's \"Name\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "phone",
					Usage:    "set the value of the operation's \"Phone\" parameter",
					Category: "INPUT",
				},
			},
			Action: func(cmd *v2.Context) error {
				tc, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer tc.Close()
				c := NewCustomerClient(tc)
				req, err := UnmarshalCliFlagsToCreateRequest(cmd)
				if err != nil {
					return fmt.Errorf("error unmarshalling request: %w", err)
				}
				opts := client.StartWorkflowOptions{}
				if tq := cmd.String("task-queue"); tq != "" {
					opts.TaskQueue = tq
				}
				run, err := c.CreateAsync(cmd.Context, req, NewCreateOptions().WithStartWorkflowOptions(opts))
				if err != nil {
					return fmt.Errorf("error starting %s workflow: %w", CreateWorkflowName, err)
				}
				if cmd.Bool("detach") {
					fmt.Println("success")
					fmt.Printf("workflow id: %s\n", run.ID())
					fmt.Printf("run id: %s\n", run.RunID())
					return nil
				}
				if err := run.Get(cmd.Context); err != nil {
					return err
				} else {
					return nil
				}
			},
		},
	}
	if opts.worker != nil {
		commands = append(commands, []*v2.Command{
			{
				Name:                   "worker",
				Usage:                  "runs a temporal.Customer worker process",
				UseShortOptionHandling: true,
				Before:                 opts.before,
				After:                  opts.after,
				Action: func(cmd *v2.Context) error {
					c, err := opts.clientForCommand(cmd)
					if err != nil {
						return fmt.Errorf("error initializing client for command: %w", err)
					}
					defer c.Close()
					w, err := opts.worker(cmd, c)
					if opts.worker != nil {
						if err != nil {
							return fmt.Errorf("error initializing worker: %w", err)
						}
					}
					if err := w.Start(); err != nil {
						return fmt.Errorf("error starting worker: %w", err)
					}
					defer w.Stop()
					<-cmd.Context.Done()
					return nil
				},
			},
		}...)
	}
	sort.Slice(commands, func(i, j int) bool {
		return commands[i].Name < commands[j].Name
	})
	return commands, nil
}

// UnmarshalCliFlagsToUpdateRequest unmarshals a UpdateRequest from command line flags
func UnmarshalCliFlagsToUpdateRequest(cmd *v2.Context, options ...helpers.UnmarshalCliFlagsOptions) (*UpdateRequest, error) {
	var result UpdateRequest
	if cmd.IsSet("input-file") {
		inputFile, err := gohomedir.Expand(cmd.String("input-file"))
		if err != nil {
			inputFile = cmd.String("input-file")
		}
		b, err := os.ReadFile(inputFile)
		if err != nil {
			return nil, fmt.Errorf("error reading input-file: %w", err)
		}
		if err := protojson.Unmarshal(b, &result); err != nil {
			return nil, fmt.Errorf("error parsing input-file json: %w", err)
		}
	}
	opts := helpers.UnmarshalCliFlagsOptions{}
	if len(options) > 0 {
		opts = options[0]
	}
	if flag := opts.FlagName("name"); cmd.IsSet(flag) {
		value := cmd.String(flag)
		result.Name = value
	}
	return &result, nil
}

// UnmarshalCliFlagsToCreateRequest unmarshals a CreateRequest from command line flags
func UnmarshalCliFlagsToCreateRequest(cmd *v2.Context, options ...helpers.UnmarshalCliFlagsOptions) (*CreateRequest, error) {
	var result CreateRequest
	if cmd.IsSet("input-file") {
		inputFile, err := gohomedir.Expand(cmd.String("input-file"))
		if err != nil {
			inputFile = cmd.String("input-file")
		}
		b, err := os.ReadFile(inputFile)
		if err != nil {
			return nil, fmt.Errorf("error reading input-file: %w", err)
		}
		if err := protojson.Unmarshal(b, &result); err != nil {
			return nil, fmt.Errorf("error parsing input-file json: %w", err)
		}
	}
	opts := helpers.UnmarshalCliFlagsOptions{}
	if len(options) > 0 {
		opts = options[0]
	}
	if flag := opts.FlagName("name"); cmd.IsSet(flag) {
		value := cmd.String(flag)
		result.Name = value
	}
	if flag := opts.FlagName("phone"); cmd.IsSet(flag) {
		value := cmd.String(flag)
		result.Phone = value
	}
	return &result, nil
}
